
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049cc  080049cc  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  080049cc  080049cc  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049cc  080049cc  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200000dc  08004ab0  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004ab0  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e97f  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fb  00000000  00000000  0002ea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00031280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00032180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a76d  00000000  00000000  00032f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f12  00000000  00000000  0004d6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9af  00000000  00000000  0005f5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eef86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000459c  00000000  00000000  000eefd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	080048c8 	.word	0x080048c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	080048c8 	.word	0x080048c8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <printERROR>:
uint8_t ERROR_CODE = 0;
uint8_t error_1[] = "ERROR: CMD_NOT_EXISTED\r\n";
uint8_t error_2[] = "\r\nERROR: BUFFER_IS_FULL\r\n";
uint8_t error_3[] = "\r\nERROR: INVALID_INPUT\r\n";

void printERROR() {
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	switch(ERROR_CODE) {
 8000164:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <printERROR+0x48>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b03      	cmp	r3, #3
 800016a:	d014      	beq.n	8000196 <printERROR+0x36>
 800016c:	2b03      	cmp	r3, #3
 800016e:	dc19      	bgt.n	80001a4 <printERROR+0x44>
 8000170:	2b01      	cmp	r3, #1
 8000172:	d002      	beq.n	800017a <printERROR+0x1a>
 8000174:	2b02      	cmp	r3, #2
 8000176:	d007      	beq.n	8000188 <printERROR+0x28>
		break;
	case INVALID_INPUT:
		HAL_UART_Transmit(&huart2, error_3, sizeof(error_3), 100);
		break;
	}
}
 8000178:	e014      	b.n	80001a4 <printERROR+0x44>
		HAL_UART_Transmit(&huart2, error_1, sizeof(error_1), 100);
 800017a:	2364      	movs	r3, #100	; 0x64
 800017c:	2219      	movs	r2, #25
 800017e:	490b      	ldr	r1, [pc, #44]	; (80001ac <printERROR+0x4c>)
 8000180:	480b      	ldr	r0, [pc, #44]	; (80001b0 <printERROR+0x50>)
 8000182:	f002 fe0e 	bl	8002da2 <HAL_UART_Transmit>
		break;
 8000186:	e00d      	b.n	80001a4 <printERROR+0x44>
		HAL_UART_Transmit(&huart2, error_2, sizeof(error_2), 100);
 8000188:	2364      	movs	r3, #100	; 0x64
 800018a:	221a      	movs	r2, #26
 800018c:	4909      	ldr	r1, [pc, #36]	; (80001b4 <printERROR+0x54>)
 800018e:	4808      	ldr	r0, [pc, #32]	; (80001b0 <printERROR+0x50>)
 8000190:	f002 fe07 	bl	8002da2 <HAL_UART_Transmit>
		break;
 8000194:	e006      	b.n	80001a4 <printERROR+0x44>
		HAL_UART_Transmit(&huart2, error_3, sizeof(error_3), 100);
 8000196:	2364      	movs	r3, #100	; 0x64
 8000198:	2219      	movs	r2, #25
 800019a:	4907      	ldr	r1, [pc, #28]	; (80001b8 <printERROR+0x58>)
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <printERROR+0x50>)
 800019e:	f002 fe00 	bl	8002da2 <HAL_UART_Transmit>
		break;
 80001a2:	bf00      	nop
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	20000000 	.word	0x20000000
 80001b0:	2000017c 	.word	0x2000017c
 80001b4:	2000001c 	.word	0x2000001c
 80001b8:	20000038 	.word	0x20000038

080001bc <uart_communiation_fsm>:
const uint8_t cmd_RST[] = "!RST#";
const uint8_t cmd_OK[] = "!OK#";
uint8_t UARTstate = IDLE;
uint8_t buffer_flag = 0;

void uart_communiation_fsm() {
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
	switch(UARTstate) {
 80001c0:	4b1b      	ldr	r3, [pc, #108]	; (8000230 <uart_communiation_fsm+0x74>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b04      	cmp	r3, #4
 80001c6:	d831      	bhi.n	800022c <uart_communiation_fsm+0x70>
 80001c8:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <uart_communiation_fsm+0x14>)
 80001ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ce:	bf00      	nop
 80001d0:	08000227 	.word	0x08000227
 80001d4:	0800022d 	.word	0x0800022d
 80001d8:	080001e5 	.word	0x080001e5
 80001dc:	080001f7 	.word	0x080001f7
 80001e0:	08000217 	.word	0x08000217
	case IDLE:
		break;
	case RESPONSE_ADC:
		printADC(GET_NEW_ADC);
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 f885 	bl	80002f4 <printADC>
		setTimer();
 80001ea:	f000 fc9f 	bl	8000b2c <setTimer>
		UARTstate = WAIT_FOR_REPLY;
 80001ee:	4b10      	ldr	r3, [pc, #64]	; (8000230 <uart_communiation_fsm+0x74>)
 80001f0:	2203      	movs	r2, #3
 80001f2:	701a      	strb	r2, [r3, #0]
		break;
 80001f4:	e01a      	b.n	800022c <uart_communiation_fsm+0x70>
	case WAIT_FOR_REPLY:
		if (timeout_flag == 1) {
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <uart_communiation_fsm+0x78>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d115      	bne.n	800022a <uart_communiation_fsm+0x6e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80001fe:	2120      	movs	r1, #32
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <uart_communiation_fsm+0x7c>)
 8000202:	f001 fcb3 	bl	8001b6c <HAL_GPIO_TogglePin>
			resetBuffer();
 8000206:	f000 f865 	bl	80002d4 <resetBuffer>
			printADC(GET_OLD_ADC);
 800020a:	2001      	movs	r0, #1
 800020c:	f000 f872 	bl	80002f4 <printADC>
			setTimer();
 8000210:	f000 fc8c 	bl	8000b2c <setTimer>
		}
		break;
 8000214:	e009      	b.n	800022a <uart_communiation_fsm+0x6e>
	case ERROR:
		printERROR();
 8000216:	f7ff ffa3 	bl	8000160 <printERROR>
		resetBuffer();
 800021a:	f000 f85b 	bl	80002d4 <resetBuffer>
		UARTstate = IDLE;
 800021e:	4b04      	ldr	r3, [pc, #16]	; (8000230 <uart_communiation_fsm+0x74>)
 8000220:	2200      	movs	r2, #0
 8000222:	701a      	strb	r2, [r3, #0]
		break;
 8000224:	e002      	b.n	800022c <uart_communiation_fsm+0x70>
		break;
 8000226:	bf00      	nop
 8000228:	e000      	b.n	800022c <uart_communiation_fsm+0x70>
		break;
 800022a:	bf00      	nop
	}
}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200000f9 	.word	0x200000f9
 8000234:	200001d0 	.word	0x200001d0
 8000238:	40010800 	.word	0x40010800

0800023c <command_parser_fsm>:

void command_parser_fsm() {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	switch(cmd_length) {
 8000240:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <command_parser_fsm+0x80>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b05      	cmp	r3, #5
 8000246:	d022      	beq.n	800028e <command_parser_fsm+0x52>
 8000248:	2b05      	cmp	r3, #5
 800024a:	dc32      	bgt.n	80002b2 <command_parser_fsm+0x76>
 800024c:	2b02      	cmp	r3, #2
 800024e:	dc02      	bgt.n	8000256 <command_parser_fsm+0x1a>
 8000250:	2b00      	cmp	r3, #0
 8000252:	da03      	bge.n	800025c <command_parser_fsm+0x20>
 8000254:	e02d      	b.n	80002b2 <command_parser_fsm+0x76>
 8000256:	2b04      	cmp	r3, #4
 8000258:	d007      	beq.n	800026a <command_parser_fsm+0x2e>
 800025a:	e02a      	b.n	80002b2 <command_parser_fsm+0x76>
	case 0:
	case 1:
	case 2:
		ERROR_CODE = CMD_NOT_EXISTED;
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <command_parser_fsm+0x84>)
 800025e:	2201      	movs	r2, #1
 8000260:	701a      	strb	r2, [r3, #0]
		UARTstate = ERROR;
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <command_parser_fsm+0x88>)
 8000264:	2204      	movs	r2, #4
 8000266:	701a      	strb	r2, [r3, #0]
		break;
 8000268:	e023      	b.n	80002b2 <command_parser_fsm+0x76>
	case 4: 	// "!OK#"
		if (strcmp((void*)cmdBuffer, (void*)cmd_OK) == 0)
 800026a:	4917      	ldr	r1, [pc, #92]	; (80002c8 <command_parser_fsm+0x8c>)
 800026c:	4817      	ldr	r0, [pc, #92]	; (80002cc <command_parser_fsm+0x90>)
 800026e:	f7ff ff6d 	bl	800014c <strcmp>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d103      	bne.n	8000280 <command_parser_fsm+0x44>
			UARTstate = IDLE;
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <command_parser_fsm+0x88>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
		else {
			ERROR_CODE = CMD_NOT_EXISTED;
			UARTstate = ERROR;
		}
		break;
 800027e:	e018      	b.n	80002b2 <command_parser_fsm+0x76>
			ERROR_CODE = CMD_NOT_EXISTED;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <command_parser_fsm+0x84>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
			UARTstate = ERROR;
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <command_parser_fsm+0x88>)
 8000288:	2204      	movs	r2, #4
 800028a:	701a      	strb	r2, [r3, #0]
		break;
 800028c:	e011      	b.n	80002b2 <command_parser_fsm+0x76>
	case 5:		// "!RST#"
		if (strcmp((void*)cmdBuffer, (void*)cmd_RST) == 0)
 800028e:	4910      	ldr	r1, [pc, #64]	; (80002d0 <command_parser_fsm+0x94>)
 8000290:	480e      	ldr	r0, [pc, #56]	; (80002cc <command_parser_fsm+0x90>)
 8000292:	f7ff ff5b 	bl	800014c <strcmp>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d103      	bne.n	80002a4 <command_parser_fsm+0x68>
			UARTstate = RESPONSE_ADC;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <command_parser_fsm+0x88>)
 800029e:	2202      	movs	r2, #2
 80002a0:	701a      	strb	r2, [r3, #0]
		else {
			ERROR_CODE = CMD_NOT_EXISTED;
			UARTstate = ERROR;
		}
		break;
 80002a2:	e005      	b.n	80002b0 <command_parser_fsm+0x74>
			ERROR_CODE = CMD_NOT_EXISTED;
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <command_parser_fsm+0x84>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	701a      	strb	r2, [r3, #0]
			UARTstate = ERROR;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <command_parser_fsm+0x88>)
 80002ac:	2204      	movs	r2, #4
 80002ae:	701a      	strb	r2, [r3, #0]
		break;
 80002b0:	bf00      	nop
	}
	resetBuffer();
 80002b2:	f000 f80f 	bl	80002d4 <resetBuffer>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200001c9 	.word	0x200001c9
 80002c0:	200000f8 	.word	0x200000f8
 80002c4:	200000f9 	.word	0x200000f9
 80002c8:	08004914 	.word	0x08004914
 80002cc:	200001c4 	.word	0x200001c4
 80002d0:	0800490c 	.word	0x0800490c

080002d4 <resetBuffer>:

uint8_t response_format_1_old[] = "\r\n!ADC=";
uint8_t response_format_1_new[] = "!ADC=";
uint8_t response_format_2[] = "#\r\n";

void resetBuffer() {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	memset(cmdBuffer, 0, CMD_MAX_LENGTH);
 80002d8:	2205      	movs	r2, #5
 80002da:	2100      	movs	r1, #0
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <resetBuffer+0x18>)
 80002de:	f003 fa75 	bl	80037cc <memset>
	cmd_length = 0;
 80002e2:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <resetBuffer+0x1c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	200001c4 	.word	0x200001c4
 80002f0:	200001c9 	.word	0x200001c9

080002f4 <printADC>:

void printADC(int indicator) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	if (indicator == GET_OLD_ADC)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d106      	bne.n	8000310 <printADC+0x1c>
		HAL_UART_Transmit(&huart2, response_format_1_old, sizeof(response_format_1_old), 100);
 8000302:	2364      	movs	r3, #100	; 0x64
 8000304:	2208      	movs	r2, #8
 8000306:	4915      	ldr	r1, [pc, #84]	; (800035c <printADC+0x68>)
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <printADC+0x6c>)
 800030a:	f002 fd4a 	bl	8002da2 <HAL_UART_Transmit>
 800030e:	e015      	b.n	800033c <printADC+0x48>
	else if (indicator == GET_NEW_ADC) {
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d112      	bne.n	800033c <printADC+0x48>
		HAL_UART_Transmit(&huart2, response_format_1_new, sizeof(response_format_1_new), 100);
 8000316:	2364      	movs	r3, #100	; 0x64
 8000318:	2206      	movs	r2, #6
 800031a:	4912      	ldr	r1, [pc, #72]	; (8000364 <printADC+0x70>)
 800031c:	4810      	ldr	r0, [pc, #64]	; (8000360 <printADC+0x6c>)
 800031e:	f002 fd40 	bl	8002da2 <HAL_UART_Transmit>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000322:	4811      	ldr	r0, [pc, #68]	; (8000368 <printADC+0x74>)
 8000324:	f000 fe52 	bl	8000fcc <HAL_ADC_GetValue>
 8000328:	4603      	mov	r3, r0
 800032a:	4a10      	ldr	r2, [pc, #64]	; (800036c <printADC+0x78>)
 800032c:	6013      	str	r3, [r2, #0]
		sprintf(ADC_print, "%d", (int)ADC_value);
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <printADC+0x78>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	461a      	mov	r2, r3
 8000334:	490e      	ldr	r1, [pc, #56]	; (8000370 <printADC+0x7c>)
 8000336:	480f      	ldr	r0, [pc, #60]	; (8000374 <printADC+0x80>)
 8000338:	f003 fac6 	bl	80038c8 <siprintf>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)ADC_print, sizeof(ADC_print), 100);
 800033c:	2364      	movs	r3, #100	; 0x64
 800033e:	2204      	movs	r2, #4
 8000340:	490c      	ldr	r1, [pc, #48]	; (8000374 <printADC+0x80>)
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <printADC+0x6c>)
 8000344:	f002 fd2d 	bl	8002da2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, response_format_2, sizeof(response_format_2), 100);
 8000348:	2364      	movs	r3, #100	; 0x64
 800034a:	2204      	movs	r2, #4
 800034c:	490a      	ldr	r1, [pc, #40]	; (8000378 <printADC+0x84>)
 800034e:	4804      	ldr	r0, [pc, #16]	; (8000360 <printADC+0x6c>)
 8000350:	f002 fd27 	bl	8002da2 <HAL_UART_Transmit>
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000054 	.word	0x20000054
 8000360:	2000017c 	.word	0x2000017c
 8000364:	2000005c 	.word	0x2000005c
 8000368:	20000104 	.word	0x20000104
 800036c:	200000fc 	.word	0x200000fc
 8000370:	080048e0 	.word	0x080048e0
 8000374:	20000100 	.word	0x20000100
 8000378:	20000064 	.word	0x20000064

0800037c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a29      	ldr	r2, [pc, #164]	; (8000430 <HAL_UART_RxCpltCallback+0xb4>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d14c      	bne.n	8000428 <HAL_UART_RxCpltCallback+0xac>
		HAL_UART_Transmit(&huart2, &rxBuffer, 1, 50);
 800038e:	2332      	movs	r3, #50	; 0x32
 8000390:	2201      	movs	r2, #1
 8000392:	4928      	ldr	r1, [pc, #160]	; (8000434 <HAL_UART_RxCpltCallback+0xb8>)
 8000394:	4828      	ldr	r0, [pc, #160]	; (8000438 <HAL_UART_RxCpltCallback+0xbc>)
 8000396:	f002 fd04 	bl	8002da2 <HAL_UART_Transmit>

		if (cmd_length >= CMD_MAX_LENGTH && rxBuffer != '\r') {
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <HAL_UART_RxCpltCallback+0xc0>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b04      	cmp	r3, #4
 80003a0:	d90a      	bls.n	80003b8 <HAL_UART_RxCpltCallback+0x3c>
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <HAL_UART_RxCpltCallback+0xb8>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b0d      	cmp	r3, #13
 80003a8:	d006      	beq.n	80003b8 <HAL_UART_RxCpltCallback+0x3c>
			ERROR_CODE = BUFFER_IS_FULL;
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <HAL_UART_RxCpltCallback+0xc4>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	701a      	strb	r2, [r3, #0]
			UARTstate = ERROR;
 80003b0:	4b24      	ldr	r3, [pc, #144]	; (8000444 <HAL_UART_RxCpltCallback+0xc8>)
 80003b2:	2204      	movs	r2, #4
 80003b4:	701a      	strb	r2, [r3, #0]
 80003b6:	e030      	b.n	800041a <HAL_UART_RxCpltCallback+0x9e>
		} else {
			switch(rxBuffer) {
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <HAL_UART_RxCpltCallback+0xb8>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b20      	cmp	r3, #32
 80003be:	d013      	beq.n	80003e8 <HAL_UART_RxCpltCallback+0x6c>
 80003c0:	2b20      	cmp	r3, #32
 80003c2:	dc1c      	bgt.n	80003fe <HAL_UART_RxCpltCallback+0x82>
 80003c4:	2b08      	cmp	r3, #8
 80003c6:	d002      	beq.n	80003ce <HAL_UART_RxCpltCallback+0x52>
 80003c8:	2b0d      	cmp	r3, #13
 80003ca:	d014      	beq.n	80003f6 <HAL_UART_RxCpltCallback+0x7a>
 80003cc:	e017      	b.n	80003fe <HAL_UART_RxCpltCallback+0x82>
			case '\b':
				cmdBuffer[cmd_length - 1] = 0;
 80003ce:	4b1b      	ldr	r3, [pc, #108]	; (800043c <HAL_UART_RxCpltCallback+0xc0>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <HAL_UART_RxCpltCallback+0xcc>)
 80003d6:	2100      	movs	r1, #0
 80003d8:	54d1      	strb	r1, [r2, r3]
				cmd_length--;
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <HAL_UART_RxCpltCallback+0xc0>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3b01      	subs	r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <HAL_UART_RxCpltCallback+0xc0>)
 80003e4:	701a      	strb	r2, [r3, #0]
				break;
 80003e6:	e018      	b.n	800041a <HAL_UART_RxCpltCallback+0x9e>
			case ' ':		// space
				ERROR_CODE = INVALID_INPUT;
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <HAL_UART_RxCpltCallback+0xc4>)
 80003ea:	2203      	movs	r2, #3
 80003ec:	701a      	strb	r2, [r3, #0]
				UARTstate = ERROR;
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <HAL_UART_RxCpltCallback+0xc8>)
 80003f0:	2204      	movs	r2, #4
 80003f2:	701a      	strb	r2, [r3, #0]
				break;
 80003f4:	e011      	b.n	800041a <HAL_UART_RxCpltCallback+0x9e>
			case '\r':
				buffer_flag = 1;
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_UART_RxCpltCallback+0xd0>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
				break;
 80003fc:	e00d      	b.n	800041a <HAL_UART_RxCpltCallback+0x9e>
			default:
				cmdBuffer[cmd_length] = rxBuffer;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_UART_RxCpltCallback+0xc0>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	461a      	mov	r2, r3
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <HAL_UART_RxCpltCallback+0xb8>)
 8000406:	7819      	ldrb	r1, [r3, #0]
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <HAL_UART_RxCpltCallback+0xcc>)
 800040a:	5499      	strb	r1, [r3, r2]
				cmd_length++;
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <HAL_UART_RxCpltCallback+0xc0>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_UART_RxCpltCallback+0xc0>)
 8000416:	701a      	strb	r2, [r3, #0]
				break;
 8000418:	bf00      	nop
			}
		}
		setTimer();
 800041a:	f000 fb87 	bl	8000b2c <setTimer>
		HAL_UART_Receive_IT(&huart2, &rxBuffer, 1);
 800041e:	2201      	movs	r2, #1
 8000420:	4904      	ldr	r1, [pc, #16]	; (8000434 <HAL_UART_RxCpltCallback+0xb8>)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <HAL_UART_RxCpltCallback+0xbc>)
 8000424:	f002 fd4f 	bl	8002ec6 <HAL_UART_Receive_IT>
	}
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40004400 	.word	0x40004400
 8000434:	200001c0 	.word	0x200001c0
 8000438:	2000017c 	.word	0x2000017c
 800043c:	200001c9 	.word	0x200001c9
 8000440:	200000f8 	.word	0x200000f8
 8000444:	200000f9 	.word	0x200000f9
 8000448:	200001c4 	.word	0x200001c4
 800044c:	200000fa 	.word	0x200000fa

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000454:	f000 fbca 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000458:	f000 f830 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045c:	f000 f932 	bl	80006c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000460:	f000 f8ba 	bl	80005d8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000464:	f000 f904 	bl	8000670 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000468:	f000 f878 	bl	800055c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  timerInit();
 800046c:	f000 fb76 	bl	8000b5c <timerInit>
  HAL_ADC_Start_IT(&hadc1);
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <main+0x54>)
 8000472:	f000 fcf5 	bl	8000e60 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000476:	480c      	ldr	r0, [pc, #48]	; (80004a8 <main+0x58>)
 8000478:	f002 f8b2 	bl	80025e0 <HAL_TIM_Base_Start_IT>
  printf("The system has started\r\n");
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <main+0x5c>)
 800047e:	f003 fa1b 	bl	80038b8 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT (&huart2, &rxBuffer, 1);
 8000482:	2201      	movs	r2, #1
 8000484:	490a      	ldr	r1, [pc, #40]	; (80004b0 <main+0x60>)
 8000486:	480b      	ldr	r0, [pc, #44]	; (80004b4 <main+0x64>)
 8000488:	f002 fd1d 	bl	8002ec6 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (buffer_flag == 1) {
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <main+0x68>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d104      	bne.n	800049e <main+0x4e>
		command_parser_fsm();
 8000494:	f7ff fed2 	bl	800023c <command_parser_fsm>
		buffer_flag = 0;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <main+0x68>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
	}
	uart_communiation_fsm();
 800049e:	f7ff fe8d 	bl	80001bc <uart_communiation_fsm>
	if (buffer_flag == 1) {
 80004a2:	e7f3      	b.n	800048c <main+0x3c>
 80004a4:	20000104 	.word	0x20000104
 80004a8:	20000134 	.word	0x20000134
 80004ac:	080048e4 	.word	0x080048e4
 80004b0:	200001c0 	.word	0x200001c0
 80004b4:	2000017c 	.word	0x2000017c
 80004b8:	200000fa 	.word	0x200000fa

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b094      	sub	sp, #80	; 0x50
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004c6:	2228      	movs	r2, #40	; 0x28
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f003 f97e 	bl	80037cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ec:	2302      	movs	r3, #2
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f0:	2301      	movs	r3, #1
 80004f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f4:	2310      	movs	r3, #16
 80004f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000500:	4618      	mov	r0, r3
 8000502:	f001 fb4d 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800050c:	f000 f922 	bl	8000754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000510:	230f      	movs	r3, #15
 8000512:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fdba 	bl	80020a4 <HAL_RCC_ClockConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000536:	f000 f90d 	bl	8000754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800053a:	2302      	movs	r3, #2
 800053c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4618      	mov	r0, r3
 8000546:	f001 ff45 	bl	80023d4 <HAL_RCCEx_PeriphCLKConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000550:	f000 f900 	bl	8000754 <Error_Handler>
  }
}
 8000554:	bf00      	nop
 8000556:	3750      	adds	r7, #80	; 0x50
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_ADC1_Init+0x74>)
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <MX_ADC1_Init+0x78>)
 8000570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_ADC1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_ADC1_Init+0x74>)
 800057a:	2201      	movs	r2, #1
 800057c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_ADC1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_ADC1_Init+0x74>)
 8000586:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800058a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_ADC1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_ADC1_Init+0x74>)
 8000594:	2201      	movs	r2, #1
 8000596:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <MX_ADC1_Init+0x74>)
 800059a:	f000 fb89 	bl	8000cb0 <HAL_ADC_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80005a4:	f000 f8d6 	bl	8000754 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_ADC1_Init+0x74>)
 80005ba:	f000 fde9 	bl	8001190 <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005c4:	f000 f8c6 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000104 	.word	0x20000104
 80005d4:	40012400 	.word	0x40012400

080005d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_TIM2_Init+0x94>)
 80005f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_TIM2_Init+0x94>)
 80005fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000602:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_TIM2_Init+0x94>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_TIM2_Init+0x94>)
 800060c:	2209      	movs	r2, #9
 800060e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_TIM2_Init+0x94>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_TIM2_Init+0x94>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <MX_TIM2_Init+0x94>)
 800061e:	f001 ff8f 	bl	8002540 <HAL_TIM_Base_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000628:	f000 f894 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4619      	mov	r1, r3
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <MX_TIM2_Init+0x94>)
 800063a:	f002 f925 	bl	8002888 <HAL_TIM_ConfigClockSource>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000644:	f000 f886 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_TIM2_Init+0x94>)
 8000656:	f002 faed 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000660:	f000 f878 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000134 	.word	0x20000134

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_USART2_UART_Init+0x50>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800067c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a8:	f002 fb2e 	bl	8002d08 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b2:	f000 f84f 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000017c 	.word	0x2000017c
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_GPIO_Init+0x74>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a16      	ldr	r2, [pc, #88]	; (8000738 <MX_GPIO_Init+0x74>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_GPIO_Init+0x74>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_GPIO_Init+0x74>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a10      	ldr	r2, [pc, #64]	; (8000738 <MX_GPIO_Init+0x74>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_GPIO_Init+0x74>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2120      	movs	r1, #32
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0x78>)
 800070e:	f001 fa15 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000712:	2320      	movs	r3, #32
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2302      	movs	r3, #2
 8000720:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4619      	mov	r1, r3
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_GPIO_Init+0x78>)
 800072a:	f001 f88b 	bl	8001844 <HAL_GPIO_Init>

}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	40010800 	.word	0x40010800

08000740 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	timer_run();
 8000748:	f000 fa10 	bl	8000b6c <timer_run>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_MspInit+0x5c>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_MspInit+0x5c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x5c>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x5c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_MspInit+0x5c>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x5c>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_MspInit+0x60>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_MspInit+0x60>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010000 	.word	0x40010000

080007c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <HAL_ADC_MspInit+0x7c>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d129      	bne.n	8000838 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_ADC_MspInit+0x80>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <HAL_ADC_MspInit+0x80>)
 80007ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_ADC_MspInit+0x80>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_ADC_MspInit+0x80>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a10      	ldr	r2, [pc, #64]	; (8000844 <HAL_ADC_MspInit+0x80>)
 8000802:	f043 0304 	orr.w	r3, r3, #4
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_ADC_MspInit+0x80>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000814:	2301      	movs	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000818:	2303      	movs	r3, #3
 800081a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <HAL_ADC_MspInit+0x84>)
 8000824:	f001 f80e 	bl	8001844 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2012      	movs	r0, #18
 800082e:	f000 ff22 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000832:	2012      	movs	r0, #18
 8000834:	f000 ff3b 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40012400 	.word	0x40012400
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800

0800084c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800085c:	d113      	bne.n	8000886 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_TIM_Base_MspInit+0x44>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <HAL_TIM_Base_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_TIM_Base_MspInit+0x44>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	201c      	movs	r0, #28
 800087c:	f000 fefb 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000880:	201c      	movs	r0, #28
 8000882:	f000 ff14 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <HAL_UART_MspInit+0x98>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d137      	bne.n	8000924 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <HAL_UART_MspInit+0x9c>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <HAL_UART_MspInit+0x9c>)
 80008ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008be:	61d3      	str	r3, [r2, #28]
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_UART_MspInit+0x9c>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UART_MspInit+0x9c>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_UART_MspInit+0x9c>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_UART_MspInit+0x9c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008e4:	2304      	movs	r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	480f      	ldr	r0, [pc, #60]	; (8000934 <HAL_UART_MspInit+0xa0>)
 80008f8:	f000 ffa4 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008fc:	2308      	movs	r3, #8
 80008fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <HAL_UART_MspInit+0xa0>)
 8000910:	f000 ff98 	bl	8001844 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2026      	movs	r0, #38	; 0x26
 800091a:	f000 feac 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800091e:	2026      	movs	r0, #38	; 0x26
 8000920:	f000 fec5 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40004400 	.word	0x40004400
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f97b 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <ADC1_2_IRQHandler+0x10>)
 800098e:	f000 fb29 	bl	8000fe4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000104 	.word	0x20000104

0800099c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM2_IRQHandler+0x10>)
 80009a2:	f001 fe69 	bl	8002678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000134 	.word	0x20000134

080009b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <USART2_IRQHandler+0x10>)
 80009b6:	f002 fab7 	bl	8002f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000017c 	.word	0x2000017c

080009c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e00a      	b.n	80009ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009d6:	f3af 8000 	nop.w
 80009da:	4601      	mov	r1, r0
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	60ba      	str	r2, [r7, #8]
 80009e2:	b2ca      	uxtb	r2, r1
 80009e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf0      	blt.n	80009d6 <_read+0x12>
	}

return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d00a      	beq.n	8000a28 <_write+0x28>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d007      	beq.n	8000a28 <_write+0x28>
	   {
	      errno = EBADF;
 8000a18:	f002 feae 	bl	8003778 <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2209      	movs	r2, #9
 8000a20:	601a      	str	r2, [r3, #0]
	      return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e00f      	b.n	8000a48 <_write+0x48>
	   }

	   // arbitrary timeout 1000
	   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 1000);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <_write+0x50>)
 8000a34:	f002 f9b5 	bl	8002da2 <HAL_UART_Transmit>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	75fb      	strb	r3, [r7, #23]

	   // return # of bytes written - as best we can tell
	   return (status == HAL_OK ? len : 0);
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <_write+0x46>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	e000      	b.n	8000a48 <_write+0x48>
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000017c 	.word	0x2000017c

08000a54 <_close>:

int _close(int file)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <_isatty>:

int _isatty(int file)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	return 1;
 8000a90:	2301      	movs	r3, #1
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f002 fe48 	bl	8003778 <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20002800 	.word	0x20002800
 8000b14:	00000400 	.word	0x00000400
 8000b18:	200001cc 	.word	0x200001cc
 8000b1c:	200001f0 	.word	0x200001f0

08000b20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <setTimer>:

int timeout_flag = 0;
int timeout_counter = 0;
int TIMER_CYCLE = 10;

void setTimer() {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	timeout_counter = TIMEOUT_VALUE / TIMER_CYCLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <setTimer+0x24>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <setTimer+0x28>)
 8000b3e:	6013      	str	r3, [r2, #0]
	timeout_flag = 0;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <setTimer+0x2c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000006c 	.word	0x2000006c
 8000b54:	200001d4 	.word	0x200001d4
 8000b58:	200001d0 	.word	0x200001d0

08000b5c <timerInit>:
void timerInit() {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	setTimer(TIMER_INIT);
 8000b60:	2064      	movs	r0, #100	; 0x64
 8000b62:	f7ff ffe3 	bl	8000b2c <setTimer>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <timer_run>:
void timer_run() {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	if (timeout_counter > 0) {
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <timer_run+0x2c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dd0b      	ble.n	8000b90 <timer_run+0x24>
		timeout_counter--;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <timer_run+0x2c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <timer_run+0x2c>)
 8000b80:	6013      	str	r3, [r2, #0]
		if (timeout_counter == 0) timeout_flag = 1;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <timer_run+0x2c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <timer_run+0x24>
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <timer_run+0x30>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
	}
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	200001d4 	.word	0x200001d4
 8000b9c:	200001d0 	.word	0x200001d0

08000ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bc6:	f7ff ffab 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f002 fddb 	bl	8003784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fc3f 	bl	8000450 <main>
  bx lr
 8000bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000bdc:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 8000be0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000be4:	200001ec 	.word	0x200001ec

08000be8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <CAN1_RX1_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_Init+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_Init+0x28>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 fd2f 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 f808 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fdaa 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fd47 	bl	80016ca <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 fd0f 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000068 	.word	0x20000068
 8000c70:	20000074 	.word	0x20000074
 8000c74:	20000070 	.word	0x20000070

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a03      	ldr	r2, [pc, #12]	; (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20000074 	.word	0x20000074
 8000c98:	200001d8 	.word	0x200001d8

08000c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	200001d8 	.word	0x200001d8

08000cb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e0be      	b.n	8000e50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d109      	bne.n	8000cf4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fd68 	bl	80007c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 fb9d 	bl	8001434 <ADC_ConversionStop_Disable>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 8099 	bne.w	8000e3e <HAL_ADC_Init+0x18e>
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8095 	bne.w	8000e3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d1c:	f023 0302 	bic.w	r3, r3, #2
 8000d20:	f043 0202 	orr.w	r2, r3, #2
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7b1b      	ldrb	r3, [r3, #12]
 8000d36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d48:	d003      	beq.n	8000d52 <HAL_ADC_Init+0xa2>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d102      	bne.n	8000d58 <HAL_ADC_Init+0xa8>
 8000d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d56:	e000      	b.n	8000d5a <HAL_ADC_Init+0xaa>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7d1b      	ldrb	r3, [r3, #20]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d119      	bne.n	8000d9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7b1b      	ldrb	r3, [r3, #12]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d109      	bne.n	8000d84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	035a      	lsls	r2, r3, #13
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e00b      	b.n	8000d9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	f043 0220 	orr.w	r2, r3, #32
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	f043 0201 	orr.w	r2, r3, #1
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <HAL_ADC_Init+0x1a8>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dcc:	d003      	beq.n	8000dd6 <HAL_ADC_Init+0x126>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d104      	bne.n	8000de0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	051b      	lsls	r3, r3, #20
 8000dde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_ADC_Init+0x1ac>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d10b      	bne.n	8000e1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0e:	f023 0303 	bic.w	r3, r3, #3
 8000e12:	f043 0201 	orr.w	r2, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e1a:	e018      	b.n	8000e4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	f023 0312 	bic.w	r3, r3, #18
 8000e24:	f043 0210 	orr.w	r2, r3, #16
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	f043 0201 	orr.w	r2, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e3c:	e007      	b.n	8000e4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f043 0210 	orr.w	r2, r3, #16
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	ffe1f7fd 	.word	0xffe1f7fd
 8000e5c:	ff1f0efe 	.word	0xff1f0efe

08000e60 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_Start_IT+0x1a>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e0a0      	b.n	8000fbc <HAL_ADC_Start_IT+0x15c>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 fa7c 	bl	8001380 <ADC_Enable>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 808f 	bne.w	8000fb2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a45      	ldr	r2, [pc, #276]	; (8000fc4 <HAL_ADC_Start_IT+0x164>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d105      	bne.n	8000ebe <HAL_ADC_Start_IT+0x5e>
 8000eb2:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <HAL_ADC_Start_IT+0x168>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d115      	bne.n	8000eea <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d026      	beq.n	8000f26 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000edc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ee8:	e01d      	b.n	8000f26 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_ADC_Start_IT+0x168>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d004      	beq.n	8000f0a <HAL_ADC_Start_IT+0xaa>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <HAL_ADC_Start_IT+0x164>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10d      	bne.n	8000f26 <HAL_ADC_Start_IT+0xc6>
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_ADC_Start_IT+0x168>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d007      	beq.n	8000f26 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	f023 0206 	bic.w	r2, r3, #6
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f3e:	e002      	b.n	8000f46 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f06f 0202 	mvn.w	r2, #2
 8000f56:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0220 	orr.w	r2, r2, #32
 8000f66:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f76:	d113      	bne.n	8000fa0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f7c:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <HAL_ADC_Start_IT+0x164>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d105      	bne.n	8000f8e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_ADC_Start_IT+0x168>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d108      	bne.n	8000fa0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	e00c      	b.n	8000fba <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	e003      	b.n	8000fba <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40012800 	.word	0x40012800
 8000fc8:	40012400 	.word	0x40012400

08000fcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0320 	and.w	r3, r3, #32
 8000ff6:	2b20      	cmp	r3, #32
 8000ff8:	d140      	bne.n	800107c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b02      	cmp	r3, #2
 8001006:	d139      	bne.n	800107c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	2b00      	cmp	r3, #0
 8001012:	d105      	bne.n	8001020 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800102a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800102e:	d11d      	bne.n	800106c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001034:	2b00      	cmp	r3, #0
 8001036:	d119      	bne.n	800106c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0220 	bic.w	r2, r2, #32
 8001046:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d105      	bne.n	800106c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	f043 0201 	orr.w	r2, r3, #1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f87c 	bl	800116a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f06f 0212 	mvn.w	r2, #18
 800107a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	2b80      	cmp	r3, #128	; 0x80
 8001088:	d14f      	bne.n	800112a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b04      	cmp	r3, #4
 8001096:	d148      	bne.n	800112a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d105      	bne.n	80010b0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80010ba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80010be:	d012      	beq.n	80010e6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d125      	bne.n	800111a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80010d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010dc:	d11d      	bne.n	800111a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d119      	bne.n	800111a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d105      	bne.n	800111a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f9cb 	bl	80014b6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f06f 020c 	mvn.w	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001134:	2b40      	cmp	r3, #64	; 0x40
 8001136:	d114      	bne.n	8001162 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10d      	bne.n	8001162 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f812 	bl	800117c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f06f 0201 	mvn.w	r2, #1
 8001160:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
	...

08001190 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_ADC_ConfigChannel+0x20>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e0dc      	b.n	800136a <HAL_ADC_ConfigChannel+0x1da>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b06      	cmp	r3, #6
 80011be:	d81c      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b05      	subs	r3, #5
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	4019      	ands	r1, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b05      	subs	r3, #5
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34
 80011f8:	e03c      	b.n	8001274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b0c      	cmp	r3, #12
 8001200:	d81c      	bhi.n	800123c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	3b23      	subs	r3, #35	; 0x23
 8001214:	221f      	movs	r2, #31
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	4019      	ands	r1, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	3b23      	subs	r3, #35	; 0x23
 800122e:	fa00 f203 	lsl.w	r2, r0, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
 800123a:	e01b      	b.n	8001274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3b41      	subs	r3, #65	; 0x41
 800124e:	221f      	movs	r2, #31
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	4019      	ands	r1, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	3b41      	subs	r3, #65	; 0x41
 8001268:	fa00 f203 	lsl.w	r2, r0, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b09      	cmp	r3, #9
 800127a:	d91c      	bls.n	80012b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68d9      	ldr	r1, [r3, #12]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	3b1e      	subs	r3, #30
 800128e:	2207      	movs	r2, #7
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	4019      	ands	r1, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6898      	ldr	r0, [r3, #8]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	3b1e      	subs	r3, #30
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	e019      	b.n	80012ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6919      	ldr	r1, [r3, #16]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	2207      	movs	r2, #7
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4019      	ands	r1, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6898      	ldr	r0, [r3, #8]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d003      	beq.n	80012fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012f6:	2b11      	cmp	r3, #17
 80012f8:	d132      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <HAL_ADC_ConfigChannel+0x1e4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d125      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d126      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001320:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b10      	cmp	r3, #16
 8001328:	d11a      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_ADC_ConfigChannel+0x1e8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <HAL_ADC_ConfigChannel+0x1ec>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	0c9a      	lsrs	r2, r3, #18
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001340:	e002      	b.n	8001348 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3b01      	subs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f9      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x1b2>
 800134e:	e007      	b.n	8001360 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	f043 0220 	orr.w	r2, r3, #32
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40012400 	.word	0x40012400
 8001378:	20000068 	.word	0x20000068
 800137c:	431bde83 	.word	0x431bde83

08001380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b01      	cmp	r3, #1
 800139c:	d040      	beq.n	8001420 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <ADC_Enable+0xac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1f      	ldr	r2, [pc, #124]	; (8001430 <ADC_Enable+0xb0>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	0c9b      	lsrs	r3, r3, #18
 80013ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013bc:	e002      	b.n	80013c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f9      	bne.n	80013be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013ca:	f7ff fc67 	bl	8000c9c <HAL_GetTick>
 80013ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013d0:	e01f      	b.n	8001412 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013d2:	f7ff fc63 	bl	8000c9c <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d918      	bls.n	8001412 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d011      	beq.n	8001412 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	f043 0210 	orr.w	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e007      	b.n	8001422 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b01      	cmp	r3, #1
 800141e:	d1d8      	bne.n	80013d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000068 	.word	0x20000068
 8001430:	431bde83 	.word	0x431bde83

08001434 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d12e      	bne.n	80014ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800145e:	f7ff fc1d 	bl	8000c9c <HAL_GetTick>
 8001462:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001464:	e01b      	b.n	800149e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001466:	f7ff fc19 	bl	8000c9c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d914      	bls.n	800149e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10d      	bne.n	800149e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	f043 0210 	orr.w	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e007      	b.n	80014ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d0dc      	beq.n	8001466 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db0b      	blt.n	8001556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	4906      	ldr	r1, [pc, #24]	; (8001560 <__NVIC_EnableIRQ+0x34>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	2001      	movs	r0, #1
 800154e:	fa00 f202 	lsl.w	r2, r0, r2
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff90 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff2d 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff42 	bl	8001510 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff90 	bl	80015b8 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5f 	bl	8001564 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff35 	bl	800152c <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b085      	sub	sp, #20
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d008      	beq.n	800170a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2204      	movs	r2, #4
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e020      	b.n	800174c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 020e 	bic.w	r2, r2, #14
 8001718:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
	...

08001758 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800176a:	2b02      	cmp	r3, #2
 800176c:	d005      	beq.n	800177a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e051      	b.n	800181e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 020e 	bic.w	r2, r2, #14
 8001788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <HAL_DMA_Abort_IT+0xd0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d029      	beq.n	80017f8 <HAL_DMA_Abort_IT+0xa0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_DMA_Abort_IT+0xd4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d022      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x9c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <HAL_DMA_Abort_IT+0xd8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d01a      	beq.n	80017ee <HAL_DMA_Abort_IT+0x96>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_DMA_Abort_IT+0xdc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d012      	beq.n	80017e8 <HAL_DMA_Abort_IT+0x90>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_DMA_Abort_IT+0xe0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00a      	beq.n	80017e2 <HAL_DMA_Abort_IT+0x8a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1a      	ldr	r2, [pc, #104]	; (800183c <HAL_DMA_Abort_IT+0xe4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d102      	bne.n	80017dc <HAL_DMA_Abort_IT+0x84>
 80017d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017da:	e00e      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e0:	e00b      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e6:	e008      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	e005      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f2:	e002      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017f4:	2310      	movs	r3, #16
 80017f6:	e000      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017f8:	2301      	movs	r3, #1
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_DMA_Abort_IT+0xe8>)
 80017fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3
    } 
  }
  return status;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40020008 	.word	0x40020008
 800182c:	4002001c 	.word	0x4002001c
 8001830:	40020030 	.word	0x40020030
 8001834:	40020044 	.word	0x40020044
 8001838:	40020058 	.word	0x40020058
 800183c:	4002006c 	.word	0x4002006c
 8001840:	40020000 	.word	0x40020000

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b08b      	sub	sp, #44	; 0x2c
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001856:	e161      	b.n	8001b1c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001858:	2201      	movs	r2, #1
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	429a      	cmp	r2, r3
 8001872:	f040 8150 	bne.w	8001b16 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a97      	ldr	r2, [pc, #604]	; (8001ad8 <HAL_GPIO_Init+0x294>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d05e      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 8001880:	4a95      	ldr	r2, [pc, #596]	; (8001ad8 <HAL_GPIO_Init+0x294>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d875      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 8001886:	4a95      	ldr	r2, [pc, #596]	; (8001adc <HAL_GPIO_Init+0x298>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d058      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 800188c:	4a93      	ldr	r2, [pc, #588]	; (8001adc <HAL_GPIO_Init+0x298>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d86f      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 8001892:	4a93      	ldr	r2, [pc, #588]	; (8001ae0 <HAL_GPIO_Init+0x29c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d052      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 8001898:	4a91      	ldr	r2, [pc, #580]	; (8001ae0 <HAL_GPIO_Init+0x29c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d869      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 800189e:	4a91      	ldr	r2, [pc, #580]	; (8001ae4 <HAL_GPIO_Init+0x2a0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d04c      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 80018a4:	4a8f      	ldr	r2, [pc, #572]	; (8001ae4 <HAL_GPIO_Init+0x2a0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d863      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018aa:	4a8f      	ldr	r2, [pc, #572]	; (8001ae8 <HAL_GPIO_Init+0x2a4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d046      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 80018b0:	4a8d      	ldr	r2, [pc, #564]	; (8001ae8 <HAL_GPIO_Init+0x2a4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d85d      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d82a      	bhi.n	8001910 <HAL_GPIO_Init+0xcc>
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d859      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <HAL_GPIO_Init+0x80>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	0800193f 	.word	0x0800193f
 80018c8:	08001919 	.word	0x08001919
 80018cc:	0800192b 	.word	0x0800192b
 80018d0:	0800196d 	.word	0x0800196d
 80018d4:	08001973 	.word	0x08001973
 80018d8:	08001973 	.word	0x08001973
 80018dc:	08001973 	.word	0x08001973
 80018e0:	08001973 	.word	0x08001973
 80018e4:	08001973 	.word	0x08001973
 80018e8:	08001973 	.word	0x08001973
 80018ec:	08001973 	.word	0x08001973
 80018f0:	08001973 	.word	0x08001973
 80018f4:	08001973 	.word	0x08001973
 80018f8:	08001973 	.word	0x08001973
 80018fc:	08001973 	.word	0x08001973
 8001900:	08001973 	.word	0x08001973
 8001904:	08001973 	.word	0x08001973
 8001908:	08001921 	.word	0x08001921
 800190c:	08001935 	.word	0x08001935
 8001910:	4a76      	ldr	r2, [pc, #472]	; (8001aec <HAL_GPIO_Init+0x2a8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001916:	e02c      	b.n	8001972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e029      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	3304      	adds	r3, #4
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e024      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	3308      	adds	r3, #8
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e01f      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	330c      	adds	r3, #12
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e01a      	b.n	8001974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001946:	2304      	movs	r3, #4
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e013      	b.n	8001974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	611a      	str	r2, [r3, #16]
          break;
 800195e:	e009      	b.n	8001974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001960:	2308      	movs	r3, #8
 8001962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	615a      	str	r2, [r3, #20]
          break;
 800196a:	e003      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x130>
          break;
 8001972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d801      	bhi.n	800197e <HAL_GPIO_Init+0x13a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	e001      	b.n	8001982 <HAL_GPIO_Init+0x13e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3304      	adds	r3, #4
 8001982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2bff      	cmp	r3, #255	; 0xff
 8001988:	d802      	bhi.n	8001990 <HAL_GPIO_Init+0x14c>
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x152>
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	3b08      	subs	r3, #8
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	210f      	movs	r1, #15
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	401a      	ands	r2, r3
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a9 	beq.w	8001b16 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c4:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_GPIO_Init+0x2ac>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a49      	ldr	r2, [pc, #292]	; (8001af0 <HAL_GPIO_Init+0x2ac>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_GPIO_Init+0x2ac>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019dc:	4a45      	ldr	r2, [pc, #276]	; (8001af4 <HAL_GPIO_Init+0x2b0>)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3d      	ldr	r2, [pc, #244]	; (8001af8 <HAL_GPIO_Init+0x2b4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3c      	ldr	r2, [pc, #240]	; (8001afc <HAL_GPIO_Init+0x2b8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1dc>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3b      	ldr	r2, [pc, #236]	; (8001b00 <HAL_GPIO_Init+0x2bc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1d8>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a24:	2300      	movs	r3, #0
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a36:	492f      	ldr	r1, [pc, #188]	; (8001af4 <HAL_GPIO_Init+0x2b0>)
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	492b      	ldr	r1, [pc, #172]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4927      	ldr	r1, [pc, #156]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4921      	ldr	r1, [pc, #132]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	491d      	ldr	r1, [pc, #116]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4917      	ldr	r1, [pc, #92]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4913      	ldr	r1, [pc, #76]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01f      	beq.n	8001b08 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	490d      	ldr	r1, [pc, #52]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
 8001ad4:	e01f      	b.n	8001b16 <HAL_GPIO_Init+0x2d2>
 8001ad6:	bf00      	nop
 8001ad8:	10320000 	.word	0x10320000
 8001adc:	10310000 	.word	0x10310000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	10210000 	.word	0x10210000
 8001ae8:	10120000 	.word	0x10120000
 8001aec:	10110000 	.word	0x10110000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40010800 	.word	0x40010800
 8001afc:	40010c00 	.word	0x40010c00
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f ae96 	bne.w	8001858 <HAL_GPIO_Init+0x14>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	372c      	adds	r7, #44	; 0x2c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b58:	e003      	b.n	8001b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4013      	ands	r3, r2
 8001b84:	041a      	lsls	r2, r3, #16
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43d9      	mvns	r1, r3
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e272      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8087 	beq.w	8001cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc0:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d00c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d112      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5e>
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	4b89      	ldr	r3, [pc, #548]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x12c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d168      	bne.n	8001ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e24c      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x76>
 8001c08:	4b80      	ldr	r3, [pc, #512]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a7f      	ldr	r2, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e02e      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x98>
 8001c1e:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7a      	ldr	r2, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b78      	ldr	r3, [pc, #480]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a77      	ldr	r2, [pc, #476]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0xbc>
 8001c42:	4b72      	ldr	r3, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a71      	ldr	r2, [pc, #452]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6e      	ldr	r2, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c5c:	4b6b      	ldr	r3, [pc, #428]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6a      	ldr	r2, [pc, #424]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b68      	ldr	r3, [pc, #416]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a67      	ldr	r2, [pc, #412]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f80e 	bl	8000c9c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff f80a 	bl	8000c9c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e200      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xe4>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fffa 	bl	8000c9c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7fe fff6 	bl	8000c9c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1ec      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x10c>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cda:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x18c>
 8001cf2:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x176>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1c0      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4939      	ldr	r1, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_RCC_OscConfig+0x270>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7fe ffaf 	bl	8000c9c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d42:	f7fe ffab 	bl	8000c9c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1a1      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4927      	ldr	r1, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_RCC_OscConfig+0x270>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe ff8e 	bl	8000c9c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d84:	f7fe ff8a 	bl	8000c9c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e180      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03a      	beq.n	8001e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d019      	beq.n	8001dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_RCC_OscConfig+0x274>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7fe ff6e 	bl	8000c9c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7fe ff6a 	bl	8000c9c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e160      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 fad8 	bl	8002398 <RCC_Delay>
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7fe ff54 	bl	8000c9c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7fe ff50 	bl	8000c9c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d908      	bls.n	8001e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e146      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	42420000 	.word	0x42420000
 8001e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b92      	ldr	r3, [pc, #584]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e9      	bne.n	8001df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80a6 	beq.w	8001f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b8b      	ldr	r3, [pc, #556]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b88      	ldr	r3, [pc, #544]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a87      	ldr	r2, [pc, #540]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]
 8001e4e:	4b85      	ldr	r3, [pc, #532]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b82      	ldr	r3, [pc, #520]	; (8002068 <HAL_RCC_OscConfig+0x4c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b7f      	ldr	r3, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x4c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7e      	ldr	r2, [pc, #504]	; (8002068 <HAL_RCC_OscConfig+0x4c8>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7fe ff11 	bl	8000c9c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7fe ff0d 	bl	8000c9c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	; 0x64
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e103      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	4b75      	ldr	r3, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x4c8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x312>
 8001ea4:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e02d      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x334>
 8001eba:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a69      	ldr	r2, [pc, #420]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a66      	ldr	r2, [pc, #408]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	e01c      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x356>
 8001edc:	4b61      	ldr	r3, [pc, #388]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a60      	ldr	r2, [pc, #384]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a5d      	ldr	r2, [pc, #372]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e00b      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a5a      	ldr	r2, [pc, #360]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	4b58      	ldr	r3, [pc, #352]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a57      	ldr	r2, [pc, #348]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7fe fec1 	bl	8000c9c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe febd 	bl	8000c9c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0b1      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ee      	beq.n	8001f1e <HAL_RCC_OscConfig+0x37e>
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7fe feab 	bl	8000c9c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fea7 	bl	8000c9c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e09b      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	4b40      	ldr	r3, [pc, #256]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8087 	beq.w	8002096 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d061      	beq.n	8002058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d146      	bne.n	800202a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b33      	ldr	r3, [pc, #204]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fe7b 	bl	8000c9c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe fe77 	bl	8000c9c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e06d      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4921      	ldr	r1, [pc, #132]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a19      	ldr	r1, [r3, #32]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	491b      	ldr	r1, [pc, #108]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7fe fe4b 	bl	8000c9c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200a:	f7fe fe47 	bl	8000c9c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e03d      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x46a>
 8002028:	e035      	b.n	8002096 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe fe34 	bl	8000c9c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7fe fe30 	bl	8000c9c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e026      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x498>
 8002056:	e01e      	b.n	8002096 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e019      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
 8002064:	40021000 	.word	0x40021000
 8002068:	40007000 	.word	0x40007000
 800206c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_OscConfig+0x500>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	429a      	cmp	r2, r3
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d0      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d910      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4965      	ldr	r1, [pc, #404]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0b8      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002100:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a58      	ldr	r2, [pc, #352]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800210a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002118:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b50      	ldr	r3, [pc, #320]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	494d      	ldr	r1, [pc, #308]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d040      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d115      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e07f      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e073      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06b      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002182:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 0203 	bic.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4936      	ldr	r1, [pc, #216]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002194:	f7fe fd82 	bl	8000c9c <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7fe fd7e 	bl	8000c9c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e053      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 020c 	and.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d210      	bcs.n	80021f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4922      	ldr	r1, [pc, #136]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e032      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4916      	ldr	r1, [pc, #88]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	490e      	ldr	r1, [pc, #56]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002232:	f000 f821 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002236:	4602      	mov	r2, r0
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	490a      	ldr	r1, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	5ccb      	ldrb	r3, [r1, r3]
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1cc>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1d0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fce0 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40022000 	.word	0x40022000
 8002268:	40021000 	.word	0x40021000
 800226c:	0800491c 	.word	0x0800491c
 8002270:	20000068 	.word	0x20000068
 8002274:	20000070 	.word	0x20000070

08002278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b490      	push	{r4, r7}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_RCC_GetSysClockFreq+0xac>)
 8002280:	1d3c      	adds	r4, r7, #4
 8002282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002288:	f240 2301 	movw	r3, #513	; 0x201
 800228c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d002      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x40>
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x46>
 80022b6:	e02b      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ba:	623b      	str	r3, [r7, #32]
      break;
 80022bc:	e02b      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3328      	adds	r3, #40	; 0x28
 80022c8:	443b      	add	r3, r7
 80022ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d012      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0c5b      	lsrs	r3, r3, #17
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	3328      	adds	r3, #40	; 0x28
 80022e6:	443b      	add	r3, r7
 80022e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022f2:	fb03 f202 	mul.w	r2, r3, r2
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	e004      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002304:	fb02 f303 	mul.w	r3, r2, r3
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	623b      	str	r3, [r7, #32]
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002312:	623b      	str	r3, [r7, #32]
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	6a3b      	ldr	r3, [r7, #32]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bc90      	pop	{r4, r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	080048fc 	.word	0x080048fc
 8002328:	40021000 	.word	0x40021000
 800232c:	007a1200 	.word	0x007a1200
 8002330:	003d0900 	.word	0x003d0900

08002334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002338:	4b02      	ldr	r3, [pc, #8]	; (8002344 <HAL_RCC_GetHCLKFreq+0x10>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	20000068 	.word	0x20000068

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800234c:	f7ff fff2 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	0800492c 	.word	0x0800492c

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002374:	f7ff ffde 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0adb      	lsrs	r3, r3, #11
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	0800492c 	.word	0x0800492c

08002398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <RCC_Delay+0x34>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <RCC_Delay+0x38>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0a5b      	lsrs	r3, r3, #9
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b4:	bf00      	nop
  }
  while (Delay --);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	60fa      	str	r2, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f9      	bne.n	80023b4 <RCC_Delay+0x1c>
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	20000068 	.word	0x20000068
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d07d      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f4:	4b4f      	ldr	r3, [pc, #316]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	61d3      	str	r3, [r2, #28]
 800240c:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002418:	2301      	movs	r3, #1
 800241a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d118      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002428:	4b43      	ldr	r3, [pc, #268]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a42      	ldr	r2, [pc, #264]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002434:	f7fe fc32 	bl	8000c9c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	e008      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7fe fc2e 	bl	8000c9c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e06d      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d02e      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d027      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002480:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002482:	4b2e      	ldr	r3, [pc, #184]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800248e:	4a29      	ldr	r2, [pc, #164]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d014      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fbfd 	bl	8000c9c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe fbf9 	bl	8000c9c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e036      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ee      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4917      	ldr	r1, [pc, #92]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	4a13      	ldr	r2, [pc, #76]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	490b      	ldr	r1, [pc, #44]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4904      	ldr	r1, [pc, #16]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
 800253c:	42420440 	.word	0x42420440

08002540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e041      	b.n	80025d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe f970 	bl	800084c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f000 fa6a 	bl	8002a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d001      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e035      	b.n	8002664 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a16      	ldr	r2, [pc, #88]	; (8002670 <HAL_TIM_Base_Start_IT+0x90>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_TIM_Base_Start_IT+0x4e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002622:	d004      	beq.n	800262e <HAL_TIM_Base_Start_IT+0x4e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a12      	ldr	r2, [pc, #72]	; (8002674 <HAL_TIM_Base_Start_IT+0x94>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d111      	bne.n	8002652 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d010      	beq.n	8002662 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002650:	e007      	b.n	8002662 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400

08002678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d122      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	d11b      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0202 	mvn.w	r2, #2
 80026a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f9b1 	bl	8002a22 <HAL_TIM_IC_CaptureCallback>
 80026c0:	e005      	b.n	80026ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f9a4 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f9b3 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d122      	bne.n	8002728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d11b      	bne.n	8002728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0204 	mvn.w	r2, #4
 80026f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f987 	bl	8002a22 <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f97a 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f989 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b08      	cmp	r3, #8
 8002734:	d122      	bne.n	800277c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b08      	cmp	r3, #8
 8002742:	d11b      	bne.n	800277c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0208 	mvn.w	r2, #8
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2204      	movs	r2, #4
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f95d 	bl	8002a22 <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f950 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f95f 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b10      	cmp	r3, #16
 8002788:	d122      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b10      	cmp	r3, #16
 8002796:	d11b      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0210 	mvn.w	r2, #16
 80027a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2208      	movs	r2, #8
 80027a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f933 	bl	8002a22 <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f926 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f935 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10e      	bne.n	80027fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d107      	bne.n	80027fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0201 	mvn.w	r2, #1
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fd ffa2 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b80      	cmp	r3, #128	; 0x80
 8002808:	d10e      	bne.n	8002828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d107      	bne.n	8002828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa67 	bl	8002cf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b40      	cmp	r3, #64	; 0x40
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d107      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800284c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f8f9 	bl	8002a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b20      	cmp	r3, #32
 8002860:	d10e      	bne.n	8002880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b20      	cmp	r3, #32
 800286e:	d107      	bne.n	8002880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0220 	mvn.w	r2, #32
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fa32 	bl	8002ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIM_ConfigClockSource+0x18>
 800289c:	2302      	movs	r3, #2
 800289e:	e0b3      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x180>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d8:	d03e      	beq.n	8002958 <HAL_TIM_ConfigClockSource+0xd0>
 80028da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028de:	f200 8087 	bhi.w	80029f0 <HAL_TIM_ConfigClockSource+0x168>
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	f000 8085 	beq.w	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ee:	d87f      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x168>
 80028f0:	2b70      	cmp	r3, #112	; 0x70
 80028f2:	d01a      	beq.n	800292a <HAL_TIM_ConfigClockSource+0xa2>
 80028f4:	2b70      	cmp	r3, #112	; 0x70
 80028f6:	d87b      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x168>
 80028f8:	2b60      	cmp	r3, #96	; 0x60
 80028fa:	d050      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x116>
 80028fc:	2b60      	cmp	r3, #96	; 0x60
 80028fe:	d877      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x168>
 8002900:	2b50      	cmp	r3, #80	; 0x50
 8002902:	d03c      	beq.n	800297e <HAL_TIM_ConfigClockSource+0xf6>
 8002904:	2b50      	cmp	r3, #80	; 0x50
 8002906:	d873      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x168>
 8002908:	2b40      	cmp	r3, #64	; 0x40
 800290a:	d058      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x136>
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d86f      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x168>
 8002910:	2b30      	cmp	r3, #48	; 0x30
 8002912:	d064      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x156>
 8002914:	2b30      	cmp	r3, #48	; 0x30
 8002916:	d86b      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x168>
 8002918:	2b20      	cmp	r3, #32
 800291a:	d060      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x156>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d867      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x168>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05c      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x156>
 8002924:	2b10      	cmp	r3, #16
 8002926:	d05a      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002928:	e062      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f000 f95c 	bl	8002bf6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800294c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	609a      	str	r2, [r3, #8]
      break;
 8002956:	e04e      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6899      	ldr	r1, [r3, #8]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f000 f945 	bl	8002bf6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800297a:	609a      	str	r2, [r3, #8]
      break;
 800297c:	e03b      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	461a      	mov	r2, r3
 800298c:	f000 f8bc 	bl	8002b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2150      	movs	r1, #80	; 0x50
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f913 	bl	8002bc2 <TIM_ITRx_SetConfig>
      break;
 800299c:	e02b      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 f8da 	bl	8002b64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2160      	movs	r1, #96	; 0x60
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f903 	bl	8002bc2 <TIM_ITRx_SetConfig>
      break;
 80029bc:	e01b      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f89c 	bl	8002b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2140      	movs	r1, #64	; 0x40
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f8f3 	bl	8002bc2 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e00b      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f000 f8ea 	bl	8002bc2 <TIM_ITRx_SetConfig>
        break;
 80029ee:	e002      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029f0:	bf00      	nop
 80029f2:	e000      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <TIM_Base_SetConfig+0xa8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <TIM_Base_SetConfig+0x28>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a76:	d003      	beq.n	8002a80 <TIM_Base_SetConfig+0x28>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <TIM_Base_SetConfig+0xac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d108      	bne.n	8002a92 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <TIM_Base_SetConfig+0xa8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <TIM_Base_SetConfig+0x52>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d003      	beq.n	8002aaa <TIM_Base_SetConfig+0x52>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <TIM_Base_SetConfig+0xac>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d108      	bne.n	8002abc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <TIM_Base_SetConfig+0xa8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d103      	bne.n	8002af0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	615a      	str	r2, [r3, #20]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400

08002b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f023 0201 	bic.w	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 030a 	bic.w	r3, r3, #10
 8002b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f023 0210 	bic.w	r2, r3, #16
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	031b      	lsls	r3, r3, #12
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ba0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f043 0307 	orr.w	r3, r3, #7
 8002be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b087      	sub	sp, #28
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	021a      	lsls	r2, r3, #8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	609a      	str	r2, [r3, #8]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e041      	b.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d004      	beq.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10c      	bne.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002caa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40000400 	.word	0x40000400

08002ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e03f      	b.n	8002d9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd fdb0 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	; 0x24
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fc85 	bl	800365c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	; 0x28
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d17c      	bne.n	8002ebc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_UART_Transmit+0x2c>
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e075      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Transmit+0x3e>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e06e      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2221      	movs	r2, #33	; 0x21
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002df6:	f7fd ff51 	bl	8000c9c <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	88fa      	ldrh	r2, [r7, #6]
 8002e06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e10:	d108      	bne.n	8002e24 <HAL_UART_Transmit+0x82>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	e003      	b.n	8002e2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e34:	e02a      	b.n	8002e8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fa38 	bl	80032b6 <UART_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e036      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10b      	bne.n	8002e6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	3302      	adds	r3, #2
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	e007      	b.n	8002e7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1cf      	bne.n	8002e36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2140      	movs	r1, #64	; 0x40
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fa08 	bl	80032b6 <UART_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e006      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d11d      	bne.n	8002f1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_UART_Receive_IT+0x26>
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e016      	b.n	8002f1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Receive_IT+0x38>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e00f      	b.n	8002f1e <HAL_UART_Receive_IT+0x58>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa19 	bl	800334a <UART_Start_Receive_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	e000      	b.n	8002f1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_UART_IRQHandler+0x52>
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fac9 	bl	800350a <UART_Receive_IT>
      return;
 8002f78:	e17b      	b.n	8003272 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80b1 	beq.w	80030e4 <HAL_UART_IRQHandler+0x1bc>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_UART_IRQHandler+0x70>
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80a6 	beq.w	80030e4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x90>
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_UART_IRQHandler+0xb0>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f043 0202 	orr.w	r2, r3, #2
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_UART_IRQHandler+0xd0>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00f      	beq.n	8003022 <HAL_UART_IRQHandler+0xfa>
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <HAL_UART_IRQHandler+0xee>
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0208 	orr.w	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 811e 	beq.w	8003268 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_UART_IRQHandler+0x11e>
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa62 	bl	800350a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <HAL_UART_IRQHandler+0x146>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d031      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f9a4 	bl	80033bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d023      	beq.n	80030ca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003090:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	2b00      	cmp	r3, #0
 8003098:	d013      	beq.n	80030c2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	4a76      	ldr	r2, [pc, #472]	; (8003278 <HAL_UART_IRQHandler+0x350>)
 80030a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fb56 	bl	8001758 <HAL_DMA_Abort_IT>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030bc:	4610      	mov	r0, r2
 80030be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	e00e      	b.n	80030e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8e3 	bl	800328e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c8:	e00a      	b.n	80030e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f8df 	bl	800328e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	e006      	b.n	80030e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8db 	bl	800328e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030de:	e0c3      	b.n	8003268 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	bf00      	nop
    return;
 80030e2:	e0c1      	b.n	8003268 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f040 80a1 	bne.w	8003230 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 809b 	beq.w	8003230 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8095 	beq.w	8003230 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04e      	beq.n	80031c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003134:	8a3b      	ldrh	r3, [r7, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8098 	beq.w	800326c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003140:	8a3a      	ldrh	r2, [r7, #16]
 8003142:	429a      	cmp	r2, r3
 8003144:	f080 8092 	bcs.w	800326c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8a3a      	ldrh	r2, [r7, #16]
 800314c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b20      	cmp	r3, #32
 8003156:	d02b      	beq.n	80031b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003166:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003186:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe fa99 	bl	80016e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	b29b      	uxth	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f86d 	bl	80032a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031c6:	e051      	b.n	800326c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d047      	beq.n	8003270 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80031e0:	8a7b      	ldrh	r3, [r7, #18]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d044      	beq.n	8003270 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0210 	bic.w	r2, r2, #16
 8003222:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003224:	8a7b      	ldrh	r3, [r7, #18]
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f839 	bl	80032a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800322e:	e01f      	b.n	8003270 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_UART_IRQHandler+0x324>
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8f9 	bl	800343c <UART_Transmit_IT>
    return;
 800324a:	e012      	b.n	8003272 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <HAL_UART_IRQHandler+0x34a>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f93a 	bl	80034da <UART_EndTransmit_IT>
    return;
 8003266:	e004      	b.n	8003272 <HAL_UART_IRQHandler+0x34a>
    return;
 8003268:	bf00      	nop
 800326a:	e002      	b.n	8003272 <HAL_UART_IRQHandler+0x34a>
      return;
 800326c:	bf00      	nop
 800326e:	e000      	b.n	8003272 <HAL_UART_IRQHandler+0x34a>
      return;
 8003270:	bf00      	nop
  }
}
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	08003415 	.word	0x08003415

0800327c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c6:	e02c      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d028      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d6:	f7fd fce1 	bl	8000c9c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d21d      	bcs.n	8003322 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00f      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	429a      	cmp	r2, r3
 800333e:	d0c3      	beq.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	88fa      	ldrh	r2, [r7, #6]
 8003362:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	88fa      	ldrh	r2, [r7, #6]
 8003368:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2222      	movs	r2, #34	; 0x22
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0220 	orr.w	r2, r2, #32
 80033ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d107      	bne.n	80033fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0210 	bic.w	r2, r2, #16
 80033fa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ff2d 	bl	800328e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b21      	cmp	r3, #33	; 0x21
 800344e:	d13e      	bne.n	80034ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003458:	d114      	bne.n	8003484 <UART_Transmit_IT+0x48>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d110      	bne.n	8003484 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003476:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]
 8003482:	e008      	b.n	8003496 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	1c59      	adds	r1, r3, #1
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6211      	str	r1, [r2, #32]
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29b      	uxth	r3, r3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4619      	mov	r1, r3
 80034a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10f      	bne.n	80034ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff febe 	bl	800327c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b22      	cmp	r3, #34	; 0x22
 800351c:	f040 8099 	bne.w	8003652 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003528:	d117      	bne.n	800355a <UART_Receive_IT+0x50>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d113      	bne.n	800355a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003548:	b29a      	uxth	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	1c9a      	adds	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
 8003558:	e026      	b.n	80035a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d007      	beq.n	800357e <UART_Receive_IT+0x74>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <UART_Receive_IT+0x82>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	e008      	b.n	800359e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003598:	b2da      	uxtb	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4619      	mov	r1, r3
 80035b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d148      	bne.n	800364e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0220 	bic.w	r2, r2, #32
 80035ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d123      	bne.n	8003644 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0210 	bic.w	r2, r2, #16
 8003610:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d10a      	bne.n	8003636 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fe2f 	bl	80032a0 <HAL_UARTEx_RxEventCallback>
 8003642:	e002      	b.n	800364a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fc fe99 	bl	800037c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e002      	b.n	8003654 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e000      	b.n	8003654 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003652:	2302      	movs	r3, #2
  }
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003696:	f023 030c 	bic.w	r3, r3, #12
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a2c      	ldr	r2, [pc, #176]	; (8003770 <UART_SetConfig+0x114>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d103      	bne.n	80036cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7fe fe54 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	e002      	b.n	80036d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036cc:	f7fe fe3c 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80036d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009a      	lsls	r2, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	4a22      	ldr	r2, [pc, #136]	; (8003774 <UART_SetConfig+0x118>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	0119      	lsls	r1, r3, #4
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009a      	lsls	r2, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	fbb2 f2f3 	udiv	r2, r2, r3
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <UART_SetConfig+0x118>)
 800370a:	fba3 0302 	umull	r0, r3, r3, r2
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2064      	movs	r0, #100	; 0x64
 8003712:	fb00 f303 	mul.w	r3, r0, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	3332      	adds	r3, #50	; 0x32
 800371c:	4a15      	ldr	r2, [pc, #84]	; (8003774 <UART_SetConfig+0x118>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003728:	4419      	add	r1, r3
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <UART_SetConfig+0x118>)
 8003742:	fba3 0302 	umull	r0, r3, r3, r2
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	2064      	movs	r0, #100	; 0x64
 800374a:	fb00 f303 	mul.w	r3, r0, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	3332      	adds	r3, #50	; 0x32
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <UART_SetConfig+0x118>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	f003 020f 	and.w	r2, r3, #15
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	440a      	add	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40013800 	.word	0x40013800
 8003774:	51eb851f 	.word	0x51eb851f

08003778 <__errno>:
 8003778:	4b01      	ldr	r3, [pc, #4]	; (8003780 <__errno+0x8>)
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000078 	.word	0x20000078

08003784 <__libc_init_array>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	2600      	movs	r6, #0
 8003788:	4d0c      	ldr	r5, [pc, #48]	; (80037bc <__libc_init_array+0x38>)
 800378a:	4c0d      	ldr	r4, [pc, #52]	; (80037c0 <__libc_init_array+0x3c>)
 800378c:	1b64      	subs	r4, r4, r5
 800378e:	10a4      	asrs	r4, r4, #2
 8003790:	42a6      	cmp	r6, r4
 8003792:	d109      	bne.n	80037a8 <__libc_init_array+0x24>
 8003794:	f001 f898 	bl	80048c8 <_init>
 8003798:	2600      	movs	r6, #0
 800379a:	4d0a      	ldr	r5, [pc, #40]	; (80037c4 <__libc_init_array+0x40>)
 800379c:	4c0a      	ldr	r4, [pc, #40]	; (80037c8 <__libc_init_array+0x44>)
 800379e:	1b64      	subs	r4, r4, r5
 80037a0:	10a4      	asrs	r4, r4, #2
 80037a2:	42a6      	cmp	r6, r4
 80037a4:	d105      	bne.n	80037b2 <__libc_init_array+0x2e>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ac:	4798      	blx	r3
 80037ae:	3601      	adds	r6, #1
 80037b0:	e7ee      	b.n	8003790 <__libc_init_array+0xc>
 80037b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b6:	4798      	blx	r3
 80037b8:	3601      	adds	r6, #1
 80037ba:	e7f2      	b.n	80037a2 <__libc_init_array+0x1e>
 80037bc:	080049cc 	.word	0x080049cc
 80037c0:	080049cc 	.word	0x080049cc
 80037c4:	080049cc 	.word	0x080049cc
 80037c8:	080049d0 	.word	0x080049d0

080037cc <memset>:
 80037cc:	4603      	mov	r3, r0
 80037ce:	4402      	add	r2, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <_puts_r>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	460e      	mov	r6, r1
 80037e0:	4605      	mov	r5, r0
 80037e2:	b118      	cbz	r0, 80037ec <_puts_r+0x10>
 80037e4:	6983      	ldr	r3, [r0, #24]
 80037e6:	b90b      	cbnz	r3, 80037ec <_puts_r+0x10>
 80037e8:	f000 fa64 	bl	8003cb4 <__sinit>
 80037ec:	69ab      	ldr	r3, [r5, #24]
 80037ee:	68ac      	ldr	r4, [r5, #8]
 80037f0:	b913      	cbnz	r3, 80037f8 <_puts_r+0x1c>
 80037f2:	4628      	mov	r0, r5
 80037f4:	f000 fa5e 	bl	8003cb4 <__sinit>
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <_puts_r+0xd0>)
 80037fa:	429c      	cmp	r4, r3
 80037fc:	d120      	bne.n	8003840 <_puts_r+0x64>
 80037fe:	686c      	ldr	r4, [r5, #4]
 8003800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003802:	07db      	lsls	r3, r3, #31
 8003804:	d405      	bmi.n	8003812 <_puts_r+0x36>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	0598      	lsls	r0, r3, #22
 800380a:	d402      	bmi.n	8003812 <_puts_r+0x36>
 800380c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800380e:	f000 faef 	bl	8003df0 <__retarget_lock_acquire_recursive>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	0719      	lsls	r1, r3, #28
 8003816:	d51d      	bpl.n	8003854 <_puts_r+0x78>
 8003818:	6923      	ldr	r3, [r4, #16]
 800381a:	b1db      	cbz	r3, 8003854 <_puts_r+0x78>
 800381c:	3e01      	subs	r6, #1
 800381e:	68a3      	ldr	r3, [r4, #8]
 8003820:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003824:	3b01      	subs	r3, #1
 8003826:	60a3      	str	r3, [r4, #8]
 8003828:	bb39      	cbnz	r1, 800387a <_puts_r+0x9e>
 800382a:	2b00      	cmp	r3, #0
 800382c:	da38      	bge.n	80038a0 <_puts_r+0xc4>
 800382e:	4622      	mov	r2, r4
 8003830:	210a      	movs	r1, #10
 8003832:	4628      	mov	r0, r5
 8003834:	f000 f868 	bl	8003908 <__swbuf_r>
 8003838:	3001      	adds	r0, #1
 800383a:	d011      	beq.n	8003860 <_puts_r+0x84>
 800383c:	250a      	movs	r5, #10
 800383e:	e011      	b.n	8003864 <_puts_r+0x88>
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <_puts_r+0xd4>)
 8003842:	429c      	cmp	r4, r3
 8003844:	d101      	bne.n	800384a <_puts_r+0x6e>
 8003846:	68ac      	ldr	r4, [r5, #8]
 8003848:	e7da      	b.n	8003800 <_puts_r+0x24>
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <_puts_r+0xd8>)
 800384c:	429c      	cmp	r4, r3
 800384e:	bf08      	it	eq
 8003850:	68ec      	ldreq	r4, [r5, #12]
 8003852:	e7d5      	b.n	8003800 <_puts_r+0x24>
 8003854:	4621      	mov	r1, r4
 8003856:	4628      	mov	r0, r5
 8003858:	f000 f8a8 	bl	80039ac <__swsetup_r>
 800385c:	2800      	cmp	r0, #0
 800385e:	d0dd      	beq.n	800381c <_puts_r+0x40>
 8003860:	f04f 35ff 	mov.w	r5, #4294967295
 8003864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003866:	07da      	lsls	r2, r3, #31
 8003868:	d405      	bmi.n	8003876 <_puts_r+0x9a>
 800386a:	89a3      	ldrh	r3, [r4, #12]
 800386c:	059b      	lsls	r3, r3, #22
 800386e:	d402      	bmi.n	8003876 <_puts_r+0x9a>
 8003870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003872:	f000 fabe 	bl	8003df2 <__retarget_lock_release_recursive>
 8003876:	4628      	mov	r0, r5
 8003878:	bd70      	pop	{r4, r5, r6, pc}
 800387a:	2b00      	cmp	r3, #0
 800387c:	da04      	bge.n	8003888 <_puts_r+0xac>
 800387e:	69a2      	ldr	r2, [r4, #24]
 8003880:	429a      	cmp	r2, r3
 8003882:	dc06      	bgt.n	8003892 <_puts_r+0xb6>
 8003884:	290a      	cmp	r1, #10
 8003886:	d004      	beq.n	8003892 <_puts_r+0xb6>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	6022      	str	r2, [r4, #0]
 800388e:	7019      	strb	r1, [r3, #0]
 8003890:	e7c5      	b.n	800381e <_puts_r+0x42>
 8003892:	4622      	mov	r2, r4
 8003894:	4628      	mov	r0, r5
 8003896:	f000 f837 	bl	8003908 <__swbuf_r>
 800389a:	3001      	adds	r0, #1
 800389c:	d1bf      	bne.n	800381e <_puts_r+0x42>
 800389e:	e7df      	b.n	8003860 <_puts_r+0x84>
 80038a0:	250a      	movs	r5, #10
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	6022      	str	r2, [r4, #0]
 80038a8:	701d      	strb	r5, [r3, #0]
 80038aa:	e7db      	b.n	8003864 <_puts_r+0x88>
 80038ac:	08004958 	.word	0x08004958
 80038b0:	08004978 	.word	0x08004978
 80038b4:	08004938 	.word	0x08004938

080038b8 <puts>:
 80038b8:	4b02      	ldr	r3, [pc, #8]	; (80038c4 <puts+0xc>)
 80038ba:	4601      	mov	r1, r0
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	f7ff bf8d 	b.w	80037dc <_puts_r>
 80038c2:	bf00      	nop
 80038c4:	20000078 	.word	0x20000078

080038c8 <siprintf>:
 80038c8:	b40e      	push	{r1, r2, r3}
 80038ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038ce:	b500      	push	{lr}
 80038d0:	b09c      	sub	sp, #112	; 0x70
 80038d2:	ab1d      	add	r3, sp, #116	; 0x74
 80038d4:	9002      	str	r0, [sp, #8]
 80038d6:	9006      	str	r0, [sp, #24]
 80038d8:	9107      	str	r1, [sp, #28]
 80038da:	9104      	str	r1, [sp, #16]
 80038dc:	4808      	ldr	r0, [pc, #32]	; (8003900 <siprintf+0x38>)
 80038de:	4909      	ldr	r1, [pc, #36]	; (8003904 <siprintf+0x3c>)
 80038e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e4:	9105      	str	r1, [sp, #20]
 80038e6:	6800      	ldr	r0, [r0, #0]
 80038e8:	a902      	add	r1, sp, #8
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	f000 fc20 	bl	8004130 <_svfiprintf_r>
 80038f0:	2200      	movs	r2, #0
 80038f2:	9b02      	ldr	r3, [sp, #8]
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	b01c      	add	sp, #112	; 0x70
 80038f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038fc:	b003      	add	sp, #12
 80038fe:	4770      	bx	lr
 8003900:	20000078 	.word	0x20000078
 8003904:	ffff0208 	.word	0xffff0208

08003908 <__swbuf_r>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	460e      	mov	r6, r1
 800390c:	4614      	mov	r4, r2
 800390e:	4605      	mov	r5, r0
 8003910:	b118      	cbz	r0, 800391a <__swbuf_r+0x12>
 8003912:	6983      	ldr	r3, [r0, #24]
 8003914:	b90b      	cbnz	r3, 800391a <__swbuf_r+0x12>
 8003916:	f000 f9cd 	bl	8003cb4 <__sinit>
 800391a:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <__swbuf_r+0x98>)
 800391c:	429c      	cmp	r4, r3
 800391e:	d12b      	bne.n	8003978 <__swbuf_r+0x70>
 8003920:	686c      	ldr	r4, [r5, #4]
 8003922:	69a3      	ldr	r3, [r4, #24]
 8003924:	60a3      	str	r3, [r4, #8]
 8003926:	89a3      	ldrh	r3, [r4, #12]
 8003928:	071a      	lsls	r2, r3, #28
 800392a:	d52f      	bpl.n	800398c <__swbuf_r+0x84>
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	b36b      	cbz	r3, 800398c <__swbuf_r+0x84>
 8003930:	6923      	ldr	r3, [r4, #16]
 8003932:	6820      	ldr	r0, [r4, #0]
 8003934:	b2f6      	uxtb	r6, r6
 8003936:	1ac0      	subs	r0, r0, r3
 8003938:	6963      	ldr	r3, [r4, #20]
 800393a:	4637      	mov	r7, r6
 800393c:	4283      	cmp	r3, r0
 800393e:	dc04      	bgt.n	800394a <__swbuf_r+0x42>
 8003940:	4621      	mov	r1, r4
 8003942:	4628      	mov	r0, r5
 8003944:	f000 f922 	bl	8003b8c <_fflush_r>
 8003948:	bb30      	cbnz	r0, 8003998 <__swbuf_r+0x90>
 800394a:	68a3      	ldr	r3, [r4, #8]
 800394c:	3001      	adds	r0, #1
 800394e:	3b01      	subs	r3, #1
 8003950:	60a3      	str	r3, [r4, #8]
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	6022      	str	r2, [r4, #0]
 8003958:	701e      	strb	r6, [r3, #0]
 800395a:	6963      	ldr	r3, [r4, #20]
 800395c:	4283      	cmp	r3, r0
 800395e:	d004      	beq.n	800396a <__swbuf_r+0x62>
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	07db      	lsls	r3, r3, #31
 8003964:	d506      	bpl.n	8003974 <__swbuf_r+0x6c>
 8003966:	2e0a      	cmp	r6, #10
 8003968:	d104      	bne.n	8003974 <__swbuf_r+0x6c>
 800396a:	4621      	mov	r1, r4
 800396c:	4628      	mov	r0, r5
 800396e:	f000 f90d 	bl	8003b8c <_fflush_r>
 8003972:	b988      	cbnz	r0, 8003998 <__swbuf_r+0x90>
 8003974:	4638      	mov	r0, r7
 8003976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <__swbuf_r+0x9c>)
 800397a:	429c      	cmp	r4, r3
 800397c:	d101      	bne.n	8003982 <__swbuf_r+0x7a>
 800397e:	68ac      	ldr	r4, [r5, #8]
 8003980:	e7cf      	b.n	8003922 <__swbuf_r+0x1a>
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <__swbuf_r+0xa0>)
 8003984:	429c      	cmp	r4, r3
 8003986:	bf08      	it	eq
 8003988:	68ec      	ldreq	r4, [r5, #12]
 800398a:	e7ca      	b.n	8003922 <__swbuf_r+0x1a>
 800398c:	4621      	mov	r1, r4
 800398e:	4628      	mov	r0, r5
 8003990:	f000 f80c 	bl	80039ac <__swsetup_r>
 8003994:	2800      	cmp	r0, #0
 8003996:	d0cb      	beq.n	8003930 <__swbuf_r+0x28>
 8003998:	f04f 37ff 	mov.w	r7, #4294967295
 800399c:	e7ea      	b.n	8003974 <__swbuf_r+0x6c>
 800399e:	bf00      	nop
 80039a0:	08004958 	.word	0x08004958
 80039a4:	08004978 	.word	0x08004978
 80039a8:	08004938 	.word	0x08004938

080039ac <__swsetup_r>:
 80039ac:	4b32      	ldr	r3, [pc, #200]	; (8003a78 <__swsetup_r+0xcc>)
 80039ae:	b570      	push	{r4, r5, r6, lr}
 80039b0:	681d      	ldr	r5, [r3, #0]
 80039b2:	4606      	mov	r6, r0
 80039b4:	460c      	mov	r4, r1
 80039b6:	b125      	cbz	r5, 80039c2 <__swsetup_r+0x16>
 80039b8:	69ab      	ldr	r3, [r5, #24]
 80039ba:	b913      	cbnz	r3, 80039c2 <__swsetup_r+0x16>
 80039bc:	4628      	mov	r0, r5
 80039be:	f000 f979 	bl	8003cb4 <__sinit>
 80039c2:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <__swsetup_r+0xd0>)
 80039c4:	429c      	cmp	r4, r3
 80039c6:	d10f      	bne.n	80039e8 <__swsetup_r+0x3c>
 80039c8:	686c      	ldr	r4, [r5, #4]
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039d0:	0719      	lsls	r1, r3, #28
 80039d2:	d42c      	bmi.n	8003a2e <__swsetup_r+0x82>
 80039d4:	06dd      	lsls	r5, r3, #27
 80039d6:	d411      	bmi.n	80039fc <__swsetup_r+0x50>
 80039d8:	2309      	movs	r3, #9
 80039da:	6033      	str	r3, [r6, #0]
 80039dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295
 80039e4:	81a3      	strh	r3, [r4, #12]
 80039e6:	e03e      	b.n	8003a66 <__swsetup_r+0xba>
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <__swsetup_r+0xd4>)
 80039ea:	429c      	cmp	r4, r3
 80039ec:	d101      	bne.n	80039f2 <__swsetup_r+0x46>
 80039ee:	68ac      	ldr	r4, [r5, #8]
 80039f0:	e7eb      	b.n	80039ca <__swsetup_r+0x1e>
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <__swsetup_r+0xd8>)
 80039f4:	429c      	cmp	r4, r3
 80039f6:	bf08      	it	eq
 80039f8:	68ec      	ldreq	r4, [r5, #12]
 80039fa:	e7e6      	b.n	80039ca <__swsetup_r+0x1e>
 80039fc:	0758      	lsls	r0, r3, #29
 80039fe:	d512      	bpl.n	8003a26 <__swsetup_r+0x7a>
 8003a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a02:	b141      	cbz	r1, 8003a16 <__swsetup_r+0x6a>
 8003a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a08:	4299      	cmp	r1, r3
 8003a0a:	d002      	beq.n	8003a12 <__swsetup_r+0x66>
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	f000 fa57 	bl	8003ec0 <_free_r>
 8003a12:	2300      	movs	r3, #0
 8003a14:	6363      	str	r3, [r4, #52]	; 0x34
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a1c:	81a3      	strh	r3, [r4, #12]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6063      	str	r3, [r4, #4]
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	6923      	ldr	r3, [r4, #16]
 8003a30:	b94b      	cbnz	r3, 8003a46 <__swsetup_r+0x9a>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3c:	d003      	beq.n	8003a46 <__swsetup_r+0x9a>
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4630      	mov	r0, r6
 8003a42:	f000 f9fd 	bl	8003e40 <__smakebuf_r>
 8003a46:	89a0      	ldrh	r0, [r4, #12]
 8003a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a4c:	f010 0301 	ands.w	r3, r0, #1
 8003a50:	d00a      	beq.n	8003a68 <__swsetup_r+0xbc>
 8003a52:	2300      	movs	r3, #0
 8003a54:	60a3      	str	r3, [r4, #8]
 8003a56:	6963      	ldr	r3, [r4, #20]
 8003a58:	425b      	negs	r3, r3
 8003a5a:	61a3      	str	r3, [r4, #24]
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	b943      	cbnz	r3, 8003a72 <__swsetup_r+0xc6>
 8003a60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a64:	d1ba      	bne.n	80039dc <__swsetup_r+0x30>
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	0781      	lsls	r1, r0, #30
 8003a6a:	bf58      	it	pl
 8003a6c:	6963      	ldrpl	r3, [r4, #20]
 8003a6e:	60a3      	str	r3, [r4, #8]
 8003a70:	e7f4      	b.n	8003a5c <__swsetup_r+0xb0>
 8003a72:	2000      	movs	r0, #0
 8003a74:	e7f7      	b.n	8003a66 <__swsetup_r+0xba>
 8003a76:	bf00      	nop
 8003a78:	20000078 	.word	0x20000078
 8003a7c:	08004958 	.word	0x08004958
 8003a80:	08004978 	.word	0x08004978
 8003a84:	08004938 	.word	0x08004938

08003a88 <__sflush_r>:
 8003a88:	898a      	ldrh	r2, [r1, #12]
 8003a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	0710      	lsls	r0, r2, #28
 8003a90:	460c      	mov	r4, r1
 8003a92:	d457      	bmi.n	8003b44 <__sflush_r+0xbc>
 8003a94:	684b      	ldr	r3, [r1, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	dc04      	bgt.n	8003aa4 <__sflush_r+0x1c>
 8003a9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	dc01      	bgt.n	8003aa4 <__sflush_r+0x1c>
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aa6:	2e00      	cmp	r6, #0
 8003aa8:	d0fa      	beq.n	8003aa0 <__sflush_r+0x18>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ab0:	682f      	ldr	r7, [r5, #0]
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	d032      	beq.n	8003b1c <__sflush_r+0x94>
 8003ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	075a      	lsls	r2, r3, #29
 8003abc:	d505      	bpl.n	8003aca <__sflush_r+0x42>
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	1ac0      	subs	r0, r0, r3
 8003ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ac4:	b10b      	cbz	r3, 8003aca <__sflush_r+0x42>
 8003ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ac8:	1ac0      	subs	r0, r0, r3
 8003aca:	2300      	movs	r3, #0
 8003acc:	4602      	mov	r2, r0
 8003ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	6a21      	ldr	r1, [r4, #32]
 8003ad4:	47b0      	blx	r6
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	d106      	bne.n	8003aea <__sflush_r+0x62>
 8003adc:	6829      	ldr	r1, [r5, #0]
 8003ade:	291d      	cmp	r1, #29
 8003ae0:	d82c      	bhi.n	8003b3c <__sflush_r+0xb4>
 8003ae2:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <__sflush_r+0x100>)
 8003ae4:	40ca      	lsrs	r2, r1
 8003ae6:	07d6      	lsls	r6, r2, #31
 8003ae8:	d528      	bpl.n	8003b3c <__sflush_r+0xb4>
 8003aea:	2200      	movs	r2, #0
 8003aec:	6062      	str	r2, [r4, #4]
 8003aee:	6922      	ldr	r2, [r4, #16]
 8003af0:	04d9      	lsls	r1, r3, #19
 8003af2:	6022      	str	r2, [r4, #0]
 8003af4:	d504      	bpl.n	8003b00 <__sflush_r+0x78>
 8003af6:	1c42      	adds	r2, r0, #1
 8003af8:	d101      	bne.n	8003afe <__sflush_r+0x76>
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	b903      	cbnz	r3, 8003b00 <__sflush_r+0x78>
 8003afe:	6560      	str	r0, [r4, #84]	; 0x54
 8003b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b02:	602f      	str	r7, [r5, #0]
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d0cb      	beq.n	8003aa0 <__sflush_r+0x18>
 8003b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	d002      	beq.n	8003b16 <__sflush_r+0x8e>
 8003b10:	4628      	mov	r0, r5
 8003b12:	f000 f9d5 	bl	8003ec0 <_free_r>
 8003b16:	2000      	movs	r0, #0
 8003b18:	6360      	str	r0, [r4, #52]	; 0x34
 8003b1a:	e7c2      	b.n	8003aa2 <__sflush_r+0x1a>
 8003b1c:	6a21      	ldr	r1, [r4, #32]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4628      	mov	r0, r5
 8003b22:	47b0      	blx	r6
 8003b24:	1c41      	adds	r1, r0, #1
 8003b26:	d1c7      	bne.n	8003ab8 <__sflush_r+0x30>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0c4      	beq.n	8003ab8 <__sflush_r+0x30>
 8003b2e:	2b1d      	cmp	r3, #29
 8003b30:	d001      	beq.n	8003b36 <__sflush_r+0xae>
 8003b32:	2b16      	cmp	r3, #22
 8003b34:	d101      	bne.n	8003b3a <__sflush_r+0xb2>
 8003b36:	602f      	str	r7, [r5, #0]
 8003b38:	e7b2      	b.n	8003aa0 <__sflush_r+0x18>
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	e7ae      	b.n	8003aa2 <__sflush_r+0x1a>
 8003b44:	690f      	ldr	r7, [r1, #16]
 8003b46:	2f00      	cmp	r7, #0
 8003b48:	d0aa      	beq.n	8003aa0 <__sflush_r+0x18>
 8003b4a:	0793      	lsls	r3, r2, #30
 8003b4c:	bf18      	it	ne
 8003b4e:	2300      	movne	r3, #0
 8003b50:	680e      	ldr	r6, [r1, #0]
 8003b52:	bf08      	it	eq
 8003b54:	694b      	ldreq	r3, [r1, #20]
 8003b56:	1bf6      	subs	r6, r6, r7
 8003b58:	600f      	str	r7, [r1, #0]
 8003b5a:	608b      	str	r3, [r1, #8]
 8003b5c:	2e00      	cmp	r6, #0
 8003b5e:	dd9f      	ble.n	8003aa0 <__sflush_r+0x18>
 8003b60:	4633      	mov	r3, r6
 8003b62:	463a      	mov	r2, r7
 8003b64:	4628      	mov	r0, r5
 8003b66:	6a21      	ldr	r1, [r4, #32]
 8003b68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003b6c:	47e0      	blx	ip
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	dc06      	bgt.n	8003b80 <__sflush_r+0xf8>
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7c:	81a3      	strh	r3, [r4, #12]
 8003b7e:	e790      	b.n	8003aa2 <__sflush_r+0x1a>
 8003b80:	4407      	add	r7, r0
 8003b82:	1a36      	subs	r6, r6, r0
 8003b84:	e7ea      	b.n	8003b5c <__sflush_r+0xd4>
 8003b86:	bf00      	nop
 8003b88:	20400001 	.word	0x20400001

08003b8c <_fflush_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	690b      	ldr	r3, [r1, #16]
 8003b90:	4605      	mov	r5, r0
 8003b92:	460c      	mov	r4, r1
 8003b94:	b913      	cbnz	r3, 8003b9c <_fflush_r+0x10>
 8003b96:	2500      	movs	r5, #0
 8003b98:	4628      	mov	r0, r5
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	b118      	cbz	r0, 8003ba6 <_fflush_r+0x1a>
 8003b9e:	6983      	ldr	r3, [r0, #24]
 8003ba0:	b90b      	cbnz	r3, 8003ba6 <_fflush_r+0x1a>
 8003ba2:	f000 f887 	bl	8003cb4 <__sinit>
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <_fflush_r+0x6c>)
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	d11b      	bne.n	8003be4 <_fflush_r+0x58>
 8003bac:	686c      	ldr	r4, [r5, #4]
 8003bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ef      	beq.n	8003b96 <_fflush_r+0xa>
 8003bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bb8:	07d0      	lsls	r0, r2, #31
 8003bba:	d404      	bmi.n	8003bc6 <_fflush_r+0x3a>
 8003bbc:	0599      	lsls	r1, r3, #22
 8003bbe:	d402      	bmi.n	8003bc6 <_fflush_r+0x3a>
 8003bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bc2:	f000 f915 	bl	8003df0 <__retarget_lock_acquire_recursive>
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	4621      	mov	r1, r4
 8003bca:	f7ff ff5d 	bl	8003a88 <__sflush_r>
 8003bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	07da      	lsls	r2, r3, #31
 8003bd4:	d4e0      	bmi.n	8003b98 <_fflush_r+0xc>
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	059b      	lsls	r3, r3, #22
 8003bda:	d4dd      	bmi.n	8003b98 <_fflush_r+0xc>
 8003bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bde:	f000 f908 	bl	8003df2 <__retarget_lock_release_recursive>
 8003be2:	e7d9      	b.n	8003b98 <_fflush_r+0xc>
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <_fflush_r+0x70>)
 8003be6:	429c      	cmp	r4, r3
 8003be8:	d101      	bne.n	8003bee <_fflush_r+0x62>
 8003bea:	68ac      	ldr	r4, [r5, #8]
 8003bec:	e7df      	b.n	8003bae <_fflush_r+0x22>
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <_fflush_r+0x74>)
 8003bf0:	429c      	cmp	r4, r3
 8003bf2:	bf08      	it	eq
 8003bf4:	68ec      	ldreq	r4, [r5, #12]
 8003bf6:	e7da      	b.n	8003bae <_fflush_r+0x22>
 8003bf8:	08004958 	.word	0x08004958
 8003bfc:	08004978 	.word	0x08004978
 8003c00:	08004938 	.word	0x08004938

08003c04 <std>:
 8003c04:	2300      	movs	r3, #0
 8003c06:	b510      	push	{r4, lr}
 8003c08:	4604      	mov	r4, r0
 8003c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c12:	6083      	str	r3, [r0, #8]
 8003c14:	8181      	strh	r1, [r0, #12]
 8003c16:	6643      	str	r3, [r0, #100]	; 0x64
 8003c18:	81c2      	strh	r2, [r0, #14]
 8003c1a:	6183      	str	r3, [r0, #24]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	2208      	movs	r2, #8
 8003c20:	305c      	adds	r0, #92	; 0x5c
 8003c22:	f7ff fdd3 	bl	80037cc <memset>
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <std+0x38>)
 8003c28:	6224      	str	r4, [r4, #32]
 8003c2a:	6263      	str	r3, [r4, #36]	; 0x24
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <std+0x3c>)
 8003c2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <std+0x40>)
 8003c32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <std+0x44>)
 8003c36:	6323      	str	r3, [r4, #48]	; 0x30
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	bf00      	nop
 8003c3c:	0800467d 	.word	0x0800467d
 8003c40:	0800469f 	.word	0x0800469f
 8003c44:	080046d7 	.word	0x080046d7
 8003c48:	080046fb 	.word	0x080046fb

08003c4c <_cleanup_r>:
 8003c4c:	4901      	ldr	r1, [pc, #4]	; (8003c54 <_cleanup_r+0x8>)
 8003c4e:	f000 b8af 	b.w	8003db0 <_fwalk_reent>
 8003c52:	bf00      	nop
 8003c54:	08003b8d 	.word	0x08003b8d

08003c58 <__sfmoreglue>:
 8003c58:	2268      	movs	r2, #104	; 0x68
 8003c5a:	b570      	push	{r4, r5, r6, lr}
 8003c5c:	1e4d      	subs	r5, r1, #1
 8003c5e:	4355      	muls	r5, r2
 8003c60:	460e      	mov	r6, r1
 8003c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c66:	f000 f993 	bl	8003f90 <_malloc_r>
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	b140      	cbz	r0, 8003c80 <__sfmoreglue+0x28>
 8003c6e:	2100      	movs	r1, #0
 8003c70:	e9c0 1600 	strd	r1, r6, [r0]
 8003c74:	300c      	adds	r0, #12
 8003c76:	60a0      	str	r0, [r4, #8]
 8003c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c7c:	f7ff fda6 	bl	80037cc <memset>
 8003c80:	4620      	mov	r0, r4
 8003c82:	bd70      	pop	{r4, r5, r6, pc}

08003c84 <__sfp_lock_acquire>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__sfp_lock_acquire+0x8>)
 8003c86:	f000 b8b3 	b.w	8003df0 <__retarget_lock_acquire_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	200001dd 	.word	0x200001dd

08003c90 <__sfp_lock_release>:
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <__sfp_lock_release+0x8>)
 8003c92:	f000 b8ae 	b.w	8003df2 <__retarget_lock_release_recursive>
 8003c96:	bf00      	nop
 8003c98:	200001dd 	.word	0x200001dd

08003c9c <__sinit_lock_acquire>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	; (8003ca4 <__sinit_lock_acquire+0x8>)
 8003c9e:	f000 b8a7 	b.w	8003df0 <__retarget_lock_acquire_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	200001de 	.word	0x200001de

08003ca8 <__sinit_lock_release>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <__sinit_lock_release+0x8>)
 8003caa:	f000 b8a2 	b.w	8003df2 <__retarget_lock_release_recursive>
 8003cae:	bf00      	nop
 8003cb0:	200001de 	.word	0x200001de

08003cb4 <__sinit>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	f7ff fff0 	bl	8003c9c <__sinit_lock_acquire>
 8003cbc:	69a3      	ldr	r3, [r4, #24]
 8003cbe:	b11b      	cbz	r3, 8003cc8 <__sinit+0x14>
 8003cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc4:	f7ff bff0 	b.w	8003ca8 <__sinit_lock_release>
 8003cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <__sinit+0x68>)
 8003cd0:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <__sinit+0x6c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003cd6:	42a3      	cmp	r3, r4
 8003cd8:	bf08      	it	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	4620      	mov	r0, r4
 8003cde:	bf08      	it	eq
 8003ce0:	61a3      	streq	r3, [r4, #24]
 8003ce2:	f000 f81f 	bl	8003d24 <__sfp>
 8003ce6:	6060      	str	r0, [r4, #4]
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f000 f81b 	bl	8003d24 <__sfp>
 8003cee:	60a0      	str	r0, [r4, #8]
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f000 f817 	bl	8003d24 <__sfp>
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2104      	movs	r1, #4
 8003cfa:	60e0      	str	r0, [r4, #12]
 8003cfc:	6860      	ldr	r0, [r4, #4]
 8003cfe:	f7ff ff81 	bl	8003c04 <std>
 8003d02:	2201      	movs	r2, #1
 8003d04:	2109      	movs	r1, #9
 8003d06:	68a0      	ldr	r0, [r4, #8]
 8003d08:	f7ff ff7c 	bl	8003c04 <std>
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	2112      	movs	r1, #18
 8003d10:	68e0      	ldr	r0, [r4, #12]
 8003d12:	f7ff ff77 	bl	8003c04 <std>
 8003d16:	2301      	movs	r3, #1
 8003d18:	61a3      	str	r3, [r4, #24]
 8003d1a:	e7d1      	b.n	8003cc0 <__sinit+0xc>
 8003d1c:	08004934 	.word	0x08004934
 8003d20:	08003c4d 	.word	0x08003c4d

08003d24 <__sfp>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	4607      	mov	r7, r0
 8003d28:	f7ff ffac 	bl	8003c84 <__sfp_lock_acquire>
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <__sfp+0x84>)
 8003d2e:	681e      	ldr	r6, [r3, #0]
 8003d30:	69b3      	ldr	r3, [r6, #24]
 8003d32:	b913      	cbnz	r3, 8003d3a <__sfp+0x16>
 8003d34:	4630      	mov	r0, r6
 8003d36:	f7ff ffbd 	bl	8003cb4 <__sinit>
 8003d3a:	3648      	adds	r6, #72	; 0x48
 8003d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	d503      	bpl.n	8003d4c <__sfp+0x28>
 8003d44:	6833      	ldr	r3, [r6, #0]
 8003d46:	b30b      	cbz	r3, 8003d8c <__sfp+0x68>
 8003d48:	6836      	ldr	r6, [r6, #0]
 8003d4a:	e7f7      	b.n	8003d3c <__sfp+0x18>
 8003d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d50:	b9d5      	cbnz	r5, 8003d88 <__sfp+0x64>
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <__sfp+0x88>)
 8003d54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d58:	60e3      	str	r3, [r4, #12]
 8003d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8003d5c:	f000 f847 	bl	8003dee <__retarget_lock_init_recursive>
 8003d60:	f7ff ff96 	bl	8003c90 <__sfp_lock_release>
 8003d64:	2208      	movs	r2, #8
 8003d66:	4629      	mov	r1, r5
 8003d68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d70:	6025      	str	r5, [r4, #0]
 8003d72:	61a5      	str	r5, [r4, #24]
 8003d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d78:	f7ff fd28 	bl	80037cc <memset>
 8003d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d84:	4620      	mov	r0, r4
 8003d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d88:	3468      	adds	r4, #104	; 0x68
 8003d8a:	e7d9      	b.n	8003d40 <__sfp+0x1c>
 8003d8c:	2104      	movs	r1, #4
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f7ff ff62 	bl	8003c58 <__sfmoreglue>
 8003d94:	4604      	mov	r4, r0
 8003d96:	6030      	str	r0, [r6, #0]
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d1d5      	bne.n	8003d48 <__sfp+0x24>
 8003d9c:	f7ff ff78 	bl	8003c90 <__sfp_lock_release>
 8003da0:	230c      	movs	r3, #12
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	e7ee      	b.n	8003d84 <__sfp+0x60>
 8003da6:	bf00      	nop
 8003da8:	08004934 	.word	0x08004934
 8003dac:	ffff0001 	.word	0xffff0001

08003db0 <_fwalk_reent>:
 8003db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db4:	4606      	mov	r6, r0
 8003db6:	4688      	mov	r8, r1
 8003db8:	2700      	movs	r7, #0
 8003dba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8003dc6:	d505      	bpl.n	8003dd4 <_fwalk_reent+0x24>
 8003dc8:	6824      	ldr	r4, [r4, #0]
 8003dca:	2c00      	cmp	r4, #0
 8003dcc:	d1f7      	bne.n	8003dbe <_fwalk_reent+0xe>
 8003dce:	4638      	mov	r0, r7
 8003dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd4:	89ab      	ldrh	r3, [r5, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d907      	bls.n	8003dea <_fwalk_reent+0x3a>
 8003dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dde:	3301      	adds	r3, #1
 8003de0:	d003      	beq.n	8003dea <_fwalk_reent+0x3a>
 8003de2:	4629      	mov	r1, r5
 8003de4:	4630      	mov	r0, r6
 8003de6:	47c0      	blx	r8
 8003de8:	4307      	orrs	r7, r0
 8003dea:	3568      	adds	r5, #104	; 0x68
 8003dec:	e7e9      	b.n	8003dc2 <_fwalk_reent+0x12>

08003dee <__retarget_lock_init_recursive>:
 8003dee:	4770      	bx	lr

08003df0 <__retarget_lock_acquire_recursive>:
 8003df0:	4770      	bx	lr

08003df2 <__retarget_lock_release_recursive>:
 8003df2:	4770      	bx	lr

08003df4 <__swhatbuf_r>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	460e      	mov	r6, r1
 8003df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	2900      	cmp	r1, #0
 8003e00:	461d      	mov	r5, r3
 8003e02:	b096      	sub	sp, #88	; 0x58
 8003e04:	da08      	bge.n	8003e18 <__swhatbuf_r+0x24>
 8003e06:	2200      	movs	r2, #0
 8003e08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e0c:	602a      	str	r2, [r5, #0]
 8003e0e:	061a      	lsls	r2, r3, #24
 8003e10:	d410      	bmi.n	8003e34 <__swhatbuf_r+0x40>
 8003e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e16:	e00e      	b.n	8003e36 <__swhatbuf_r+0x42>
 8003e18:	466a      	mov	r2, sp
 8003e1a:	f000 fc95 	bl	8004748 <_fstat_r>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	dbf1      	blt.n	8003e06 <__swhatbuf_r+0x12>
 8003e22:	9a01      	ldr	r2, [sp, #4]
 8003e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e2c:	425a      	negs	r2, r3
 8003e2e:	415a      	adcs	r2, r3
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	e7ee      	b.n	8003e12 <__swhatbuf_r+0x1e>
 8003e34:	2340      	movs	r3, #64	; 0x40
 8003e36:	2000      	movs	r0, #0
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	b016      	add	sp, #88	; 0x58
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e40 <__smakebuf_r>:
 8003e40:	898b      	ldrh	r3, [r1, #12]
 8003e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e44:	079d      	lsls	r5, r3, #30
 8003e46:	4606      	mov	r6, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	d507      	bpl.n	8003e5c <__smakebuf_r+0x1c>
 8003e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	6123      	str	r3, [r4, #16]
 8003e54:	2301      	movs	r3, #1
 8003e56:	6163      	str	r3, [r4, #20]
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	466a      	mov	r2, sp
 8003e5e:	ab01      	add	r3, sp, #4
 8003e60:	f7ff ffc8 	bl	8003df4 <__swhatbuf_r>
 8003e64:	9900      	ldr	r1, [sp, #0]
 8003e66:	4605      	mov	r5, r0
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f000 f891 	bl	8003f90 <_malloc_r>
 8003e6e:	b948      	cbnz	r0, 8003e84 <__smakebuf_r+0x44>
 8003e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e74:	059a      	lsls	r2, r3, #22
 8003e76:	d4ef      	bmi.n	8003e58 <__smakebuf_r+0x18>
 8003e78:	f023 0303 	bic.w	r3, r3, #3
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	81a3      	strh	r3, [r4, #12]
 8003e82:	e7e3      	b.n	8003e4c <__smakebuf_r+0xc>
 8003e84:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <__smakebuf_r+0x7c>)
 8003e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	6020      	str	r0, [r4, #0]
 8003e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	9b00      	ldr	r3, [sp, #0]
 8003e94:	6120      	str	r0, [r4, #16]
 8003e96:	6163      	str	r3, [r4, #20]
 8003e98:	9b01      	ldr	r3, [sp, #4]
 8003e9a:	b15b      	cbz	r3, 8003eb4 <__smakebuf_r+0x74>
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ea2:	f000 fc63 	bl	800476c <_isatty_r>
 8003ea6:	b128      	cbz	r0, 8003eb4 <__smakebuf_r+0x74>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	89a0      	ldrh	r0, [r4, #12]
 8003eb6:	4305      	orrs	r5, r0
 8003eb8:	81a5      	strh	r5, [r4, #12]
 8003eba:	e7cd      	b.n	8003e58 <__smakebuf_r+0x18>
 8003ebc:	08003c4d 	.word	0x08003c4d

08003ec0 <_free_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	d040      	beq.n	8003f4a <_free_r+0x8a>
 8003ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ecc:	1f0c      	subs	r4, r1, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bfb8      	it	lt
 8003ed2:	18e4      	addlt	r4, r4, r3
 8003ed4:	f000 fca2 	bl	800481c <__malloc_lock>
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <_free_r+0x8c>)
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	b933      	cbnz	r3, 8003eec <_free_r+0x2c>
 8003ede:	6063      	str	r3, [r4, #4]
 8003ee0:	6014      	str	r4, [r2, #0]
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ee8:	f000 bc9e 	b.w	8004828 <__malloc_unlock>
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	d908      	bls.n	8003f02 <_free_r+0x42>
 8003ef0:	6820      	ldr	r0, [r4, #0]
 8003ef2:	1821      	adds	r1, r4, r0
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	bf01      	itttt	eq
 8003ef8:	6819      	ldreq	r1, [r3, #0]
 8003efa:	685b      	ldreq	r3, [r3, #4]
 8003efc:	1809      	addeq	r1, r1, r0
 8003efe:	6021      	streq	r1, [r4, #0]
 8003f00:	e7ed      	b.n	8003ede <_free_r+0x1e>
 8003f02:	461a      	mov	r2, r3
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	b10b      	cbz	r3, 8003f0c <_free_r+0x4c>
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d9fa      	bls.n	8003f02 <_free_r+0x42>
 8003f0c:	6811      	ldr	r1, [r2, #0]
 8003f0e:	1850      	adds	r0, r2, r1
 8003f10:	42a0      	cmp	r0, r4
 8003f12:	d10b      	bne.n	8003f2c <_free_r+0x6c>
 8003f14:	6820      	ldr	r0, [r4, #0]
 8003f16:	4401      	add	r1, r0
 8003f18:	1850      	adds	r0, r2, r1
 8003f1a:	4283      	cmp	r3, r0
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	d1e0      	bne.n	8003ee2 <_free_r+0x22>
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4401      	add	r1, r0
 8003f26:	6011      	str	r1, [r2, #0]
 8003f28:	6053      	str	r3, [r2, #4]
 8003f2a:	e7da      	b.n	8003ee2 <_free_r+0x22>
 8003f2c:	d902      	bls.n	8003f34 <_free_r+0x74>
 8003f2e:	230c      	movs	r3, #12
 8003f30:	602b      	str	r3, [r5, #0]
 8003f32:	e7d6      	b.n	8003ee2 <_free_r+0x22>
 8003f34:	6820      	ldr	r0, [r4, #0]
 8003f36:	1821      	adds	r1, r4, r0
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	bf01      	itttt	eq
 8003f3c:	6819      	ldreq	r1, [r3, #0]
 8003f3e:	685b      	ldreq	r3, [r3, #4]
 8003f40:	1809      	addeq	r1, r1, r0
 8003f42:	6021      	streq	r1, [r4, #0]
 8003f44:	6063      	str	r3, [r4, #4]
 8003f46:	6054      	str	r4, [r2, #4]
 8003f48:	e7cb      	b.n	8003ee2 <_free_r+0x22>
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	200001e0 	.word	0x200001e0

08003f50 <sbrk_aligned>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4e0e      	ldr	r6, [pc, #56]	; (8003f8c <sbrk_aligned+0x3c>)
 8003f54:	460c      	mov	r4, r1
 8003f56:	6831      	ldr	r1, [r6, #0]
 8003f58:	4605      	mov	r5, r0
 8003f5a:	b911      	cbnz	r1, 8003f62 <sbrk_aligned+0x12>
 8003f5c:	f000 fb7e 	bl	800465c <_sbrk_r>
 8003f60:	6030      	str	r0, [r6, #0]
 8003f62:	4621      	mov	r1, r4
 8003f64:	4628      	mov	r0, r5
 8003f66:	f000 fb79 	bl	800465c <_sbrk_r>
 8003f6a:	1c43      	adds	r3, r0, #1
 8003f6c:	d00a      	beq.n	8003f84 <sbrk_aligned+0x34>
 8003f6e:	1cc4      	adds	r4, r0, #3
 8003f70:	f024 0403 	bic.w	r4, r4, #3
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d007      	beq.n	8003f88 <sbrk_aligned+0x38>
 8003f78:	1a21      	subs	r1, r4, r0
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 fb6e 	bl	800465c <_sbrk_r>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d101      	bne.n	8003f88 <sbrk_aligned+0x38>
 8003f84:	f04f 34ff 	mov.w	r4, #4294967295
 8003f88:	4620      	mov	r0, r4
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	200001e4 	.word	0x200001e4

08003f90 <_malloc_r>:
 8003f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f94:	1ccd      	adds	r5, r1, #3
 8003f96:	f025 0503 	bic.w	r5, r5, #3
 8003f9a:	3508      	adds	r5, #8
 8003f9c:	2d0c      	cmp	r5, #12
 8003f9e:	bf38      	it	cc
 8003fa0:	250c      	movcc	r5, #12
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	4607      	mov	r7, r0
 8003fa6:	db01      	blt.n	8003fac <_malloc_r+0x1c>
 8003fa8:	42a9      	cmp	r1, r5
 8003faa:	d905      	bls.n	8003fb8 <_malloc_r+0x28>
 8003fac:	230c      	movs	r3, #12
 8003fae:	2600      	movs	r6, #0
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb8:	4e2e      	ldr	r6, [pc, #184]	; (8004074 <_malloc_r+0xe4>)
 8003fba:	f000 fc2f 	bl	800481c <__malloc_lock>
 8003fbe:	6833      	ldr	r3, [r6, #0]
 8003fc0:	461c      	mov	r4, r3
 8003fc2:	bb34      	cbnz	r4, 8004012 <_malloc_r+0x82>
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f7ff ffc2 	bl	8003f50 <sbrk_aligned>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	4604      	mov	r4, r0
 8003fd0:	d14d      	bne.n	800406e <_malloc_r+0xde>
 8003fd2:	6834      	ldr	r4, [r6, #0]
 8003fd4:	4626      	mov	r6, r4
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	d140      	bne.n	800405c <_malloc_r+0xcc>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	4631      	mov	r1, r6
 8003fde:	4638      	mov	r0, r7
 8003fe0:	eb04 0803 	add.w	r8, r4, r3
 8003fe4:	f000 fb3a 	bl	800465c <_sbrk_r>
 8003fe8:	4580      	cmp	r8, r0
 8003fea:	d13a      	bne.n	8004062 <_malloc_r+0xd2>
 8003fec:	6821      	ldr	r1, [r4, #0]
 8003fee:	3503      	adds	r5, #3
 8003ff0:	1a6d      	subs	r5, r5, r1
 8003ff2:	f025 0503 	bic.w	r5, r5, #3
 8003ff6:	3508      	adds	r5, #8
 8003ff8:	2d0c      	cmp	r5, #12
 8003ffa:	bf38      	it	cc
 8003ffc:	250c      	movcc	r5, #12
 8003ffe:	4638      	mov	r0, r7
 8004000:	4629      	mov	r1, r5
 8004002:	f7ff ffa5 	bl	8003f50 <sbrk_aligned>
 8004006:	3001      	adds	r0, #1
 8004008:	d02b      	beq.n	8004062 <_malloc_r+0xd2>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	442b      	add	r3, r5
 800400e:	6023      	str	r3, [r4, #0]
 8004010:	e00e      	b.n	8004030 <_malloc_r+0xa0>
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	1b52      	subs	r2, r2, r5
 8004016:	d41e      	bmi.n	8004056 <_malloc_r+0xc6>
 8004018:	2a0b      	cmp	r2, #11
 800401a:	d916      	bls.n	800404a <_malloc_r+0xba>
 800401c:	1961      	adds	r1, r4, r5
 800401e:	42a3      	cmp	r3, r4
 8004020:	6025      	str	r5, [r4, #0]
 8004022:	bf18      	it	ne
 8004024:	6059      	strne	r1, [r3, #4]
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	bf08      	it	eq
 800402a:	6031      	streq	r1, [r6, #0]
 800402c:	5162      	str	r2, [r4, r5]
 800402e:	604b      	str	r3, [r1, #4]
 8004030:	4638      	mov	r0, r7
 8004032:	f104 060b 	add.w	r6, r4, #11
 8004036:	f000 fbf7 	bl	8004828 <__malloc_unlock>
 800403a:	f026 0607 	bic.w	r6, r6, #7
 800403e:	1d23      	adds	r3, r4, #4
 8004040:	1af2      	subs	r2, r6, r3
 8004042:	d0b6      	beq.n	8003fb2 <_malloc_r+0x22>
 8004044:	1b9b      	subs	r3, r3, r6
 8004046:	50a3      	str	r3, [r4, r2]
 8004048:	e7b3      	b.n	8003fb2 <_malloc_r+0x22>
 800404a:	6862      	ldr	r2, [r4, #4]
 800404c:	42a3      	cmp	r3, r4
 800404e:	bf0c      	ite	eq
 8004050:	6032      	streq	r2, [r6, #0]
 8004052:	605a      	strne	r2, [r3, #4]
 8004054:	e7ec      	b.n	8004030 <_malloc_r+0xa0>
 8004056:	4623      	mov	r3, r4
 8004058:	6864      	ldr	r4, [r4, #4]
 800405a:	e7b2      	b.n	8003fc2 <_malloc_r+0x32>
 800405c:	4634      	mov	r4, r6
 800405e:	6876      	ldr	r6, [r6, #4]
 8004060:	e7b9      	b.n	8003fd6 <_malloc_r+0x46>
 8004062:	230c      	movs	r3, #12
 8004064:	4638      	mov	r0, r7
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	f000 fbde 	bl	8004828 <__malloc_unlock>
 800406c:	e7a1      	b.n	8003fb2 <_malloc_r+0x22>
 800406e:	6025      	str	r5, [r4, #0]
 8004070:	e7de      	b.n	8004030 <_malloc_r+0xa0>
 8004072:	bf00      	nop
 8004074:	200001e0 	.word	0x200001e0

08004078 <__ssputs_r>:
 8004078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800407c:	688e      	ldr	r6, [r1, #8]
 800407e:	4682      	mov	sl, r0
 8004080:	429e      	cmp	r6, r3
 8004082:	460c      	mov	r4, r1
 8004084:	4690      	mov	r8, r2
 8004086:	461f      	mov	r7, r3
 8004088:	d838      	bhi.n	80040fc <__ssputs_r+0x84>
 800408a:	898a      	ldrh	r2, [r1, #12]
 800408c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004090:	d032      	beq.n	80040f8 <__ssputs_r+0x80>
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	6909      	ldr	r1, [r1, #16]
 8004096:	3301      	adds	r3, #1
 8004098:	eba5 0901 	sub.w	r9, r5, r1
 800409c:	6965      	ldr	r5, [r4, #20]
 800409e:	444b      	add	r3, r9
 80040a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040a8:	106d      	asrs	r5, r5, #1
 80040aa:	429d      	cmp	r5, r3
 80040ac:	bf38      	it	cc
 80040ae:	461d      	movcc	r5, r3
 80040b0:	0553      	lsls	r3, r2, #21
 80040b2:	d531      	bpl.n	8004118 <__ssputs_r+0xa0>
 80040b4:	4629      	mov	r1, r5
 80040b6:	f7ff ff6b 	bl	8003f90 <_malloc_r>
 80040ba:	4606      	mov	r6, r0
 80040bc:	b950      	cbnz	r0, 80040d4 <__ssputs_r+0x5c>
 80040be:	230c      	movs	r3, #12
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	f8ca 3000 	str.w	r3, [sl]
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ce:	81a3      	strh	r3, [r4, #12]
 80040d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d4:	464a      	mov	r2, r9
 80040d6:	6921      	ldr	r1, [r4, #16]
 80040d8:	f000 fb78 	bl	80047cc <memcpy>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	6126      	str	r6, [r4, #16]
 80040ea:	444e      	add	r6, r9
 80040ec:	6026      	str	r6, [r4, #0]
 80040ee:	463e      	mov	r6, r7
 80040f0:	6165      	str	r5, [r4, #20]
 80040f2:	eba5 0509 	sub.w	r5, r5, r9
 80040f6:	60a5      	str	r5, [r4, #8]
 80040f8:	42be      	cmp	r6, r7
 80040fa:	d900      	bls.n	80040fe <__ssputs_r+0x86>
 80040fc:	463e      	mov	r6, r7
 80040fe:	4632      	mov	r2, r6
 8004100:	4641      	mov	r1, r8
 8004102:	6820      	ldr	r0, [r4, #0]
 8004104:	f000 fb70 	bl	80047e8 <memmove>
 8004108:	68a3      	ldr	r3, [r4, #8]
 800410a:	2000      	movs	r0, #0
 800410c:	1b9b      	subs	r3, r3, r6
 800410e:	60a3      	str	r3, [r4, #8]
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	4433      	add	r3, r6
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	e7db      	b.n	80040d0 <__ssputs_r+0x58>
 8004118:	462a      	mov	r2, r5
 800411a:	f000 fb8b 	bl	8004834 <_realloc_r>
 800411e:	4606      	mov	r6, r0
 8004120:	2800      	cmp	r0, #0
 8004122:	d1e1      	bne.n	80040e8 <__ssputs_r+0x70>
 8004124:	4650      	mov	r0, sl
 8004126:	6921      	ldr	r1, [r4, #16]
 8004128:	f7ff feca 	bl	8003ec0 <_free_r>
 800412c:	e7c7      	b.n	80040be <__ssputs_r+0x46>
	...

08004130 <_svfiprintf_r>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	4698      	mov	r8, r3
 8004136:	898b      	ldrh	r3, [r1, #12]
 8004138:	4607      	mov	r7, r0
 800413a:	061b      	lsls	r3, r3, #24
 800413c:	460d      	mov	r5, r1
 800413e:	4614      	mov	r4, r2
 8004140:	b09d      	sub	sp, #116	; 0x74
 8004142:	d50e      	bpl.n	8004162 <_svfiprintf_r+0x32>
 8004144:	690b      	ldr	r3, [r1, #16]
 8004146:	b963      	cbnz	r3, 8004162 <_svfiprintf_r+0x32>
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	f7ff ff21 	bl	8003f90 <_malloc_r>
 800414e:	6028      	str	r0, [r5, #0]
 8004150:	6128      	str	r0, [r5, #16]
 8004152:	b920      	cbnz	r0, 800415e <_svfiprintf_r+0x2e>
 8004154:	230c      	movs	r3, #12
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	e0d1      	b.n	8004302 <_svfiprintf_r+0x1d2>
 800415e:	2340      	movs	r3, #64	; 0x40
 8004160:	616b      	str	r3, [r5, #20]
 8004162:	2300      	movs	r3, #0
 8004164:	9309      	str	r3, [sp, #36]	; 0x24
 8004166:	2320      	movs	r3, #32
 8004168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800416c:	2330      	movs	r3, #48	; 0x30
 800416e:	f04f 0901 	mov.w	r9, #1
 8004172:	f8cd 800c 	str.w	r8, [sp, #12]
 8004176:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800431c <_svfiprintf_r+0x1ec>
 800417a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800417e:	4623      	mov	r3, r4
 8004180:	469a      	mov	sl, r3
 8004182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004186:	b10a      	cbz	r2, 800418c <_svfiprintf_r+0x5c>
 8004188:	2a25      	cmp	r2, #37	; 0x25
 800418a:	d1f9      	bne.n	8004180 <_svfiprintf_r+0x50>
 800418c:	ebba 0b04 	subs.w	fp, sl, r4
 8004190:	d00b      	beq.n	80041aa <_svfiprintf_r+0x7a>
 8004192:	465b      	mov	r3, fp
 8004194:	4622      	mov	r2, r4
 8004196:	4629      	mov	r1, r5
 8004198:	4638      	mov	r0, r7
 800419a:	f7ff ff6d 	bl	8004078 <__ssputs_r>
 800419e:	3001      	adds	r0, #1
 80041a0:	f000 80aa 	beq.w	80042f8 <_svfiprintf_r+0x1c8>
 80041a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041a6:	445a      	add	r2, fp
 80041a8:	9209      	str	r2, [sp, #36]	; 0x24
 80041aa:	f89a 3000 	ldrb.w	r3, [sl]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80a2 	beq.w	80042f8 <_svfiprintf_r+0x1c8>
 80041b4:	2300      	movs	r3, #0
 80041b6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041be:	f10a 0a01 	add.w	sl, sl, #1
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	9307      	str	r3, [sp, #28]
 80041c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041ca:	931a      	str	r3, [sp, #104]	; 0x68
 80041cc:	4654      	mov	r4, sl
 80041ce:	2205      	movs	r2, #5
 80041d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d4:	4851      	ldr	r0, [pc, #324]	; (800431c <_svfiprintf_r+0x1ec>)
 80041d6:	f000 faeb 	bl	80047b0 <memchr>
 80041da:	9a04      	ldr	r2, [sp, #16]
 80041dc:	b9d8      	cbnz	r0, 8004216 <_svfiprintf_r+0xe6>
 80041de:	06d0      	lsls	r0, r2, #27
 80041e0:	bf44      	itt	mi
 80041e2:	2320      	movmi	r3, #32
 80041e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e8:	0711      	lsls	r1, r2, #28
 80041ea:	bf44      	itt	mi
 80041ec:	232b      	movmi	r3, #43	; 0x2b
 80041ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041f2:	f89a 3000 	ldrb.w	r3, [sl]
 80041f6:	2b2a      	cmp	r3, #42	; 0x2a
 80041f8:	d015      	beq.n	8004226 <_svfiprintf_r+0xf6>
 80041fa:	4654      	mov	r4, sl
 80041fc:	2000      	movs	r0, #0
 80041fe:	f04f 0c0a 	mov.w	ip, #10
 8004202:	9a07      	ldr	r2, [sp, #28]
 8004204:	4621      	mov	r1, r4
 8004206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420a:	3b30      	subs	r3, #48	; 0x30
 800420c:	2b09      	cmp	r3, #9
 800420e:	d94e      	bls.n	80042ae <_svfiprintf_r+0x17e>
 8004210:	b1b0      	cbz	r0, 8004240 <_svfiprintf_r+0x110>
 8004212:	9207      	str	r2, [sp, #28]
 8004214:	e014      	b.n	8004240 <_svfiprintf_r+0x110>
 8004216:	eba0 0308 	sub.w	r3, r0, r8
 800421a:	fa09 f303 	lsl.w	r3, r9, r3
 800421e:	4313      	orrs	r3, r2
 8004220:	46a2      	mov	sl, r4
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	e7d2      	b.n	80041cc <_svfiprintf_r+0x9c>
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	1d19      	adds	r1, r3, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	9103      	str	r1, [sp, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfbb      	ittet	lt
 8004232:	425b      	neglt	r3, r3
 8004234:	f042 0202 	orrlt.w	r2, r2, #2
 8004238:	9307      	strge	r3, [sp, #28]
 800423a:	9307      	strlt	r3, [sp, #28]
 800423c:	bfb8      	it	lt
 800423e:	9204      	strlt	r2, [sp, #16]
 8004240:	7823      	ldrb	r3, [r4, #0]
 8004242:	2b2e      	cmp	r3, #46	; 0x2e
 8004244:	d10c      	bne.n	8004260 <_svfiprintf_r+0x130>
 8004246:	7863      	ldrb	r3, [r4, #1]
 8004248:	2b2a      	cmp	r3, #42	; 0x2a
 800424a:	d135      	bne.n	80042b8 <_svfiprintf_r+0x188>
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	3402      	adds	r4, #2
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	9203      	str	r2, [sp, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	bfb8      	it	lt
 800425a:	f04f 33ff 	movlt.w	r3, #4294967295
 800425e:	9305      	str	r3, [sp, #20]
 8004260:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004320 <_svfiprintf_r+0x1f0>
 8004264:	2203      	movs	r2, #3
 8004266:	4650      	mov	r0, sl
 8004268:	7821      	ldrb	r1, [r4, #0]
 800426a:	f000 faa1 	bl	80047b0 <memchr>
 800426e:	b140      	cbz	r0, 8004282 <_svfiprintf_r+0x152>
 8004270:	2340      	movs	r3, #64	; 0x40
 8004272:	eba0 000a 	sub.w	r0, r0, sl
 8004276:	fa03 f000 	lsl.w	r0, r3, r0
 800427a:	9b04      	ldr	r3, [sp, #16]
 800427c:	3401      	adds	r4, #1
 800427e:	4303      	orrs	r3, r0
 8004280:	9304      	str	r3, [sp, #16]
 8004282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004286:	2206      	movs	r2, #6
 8004288:	4826      	ldr	r0, [pc, #152]	; (8004324 <_svfiprintf_r+0x1f4>)
 800428a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800428e:	f000 fa8f 	bl	80047b0 <memchr>
 8004292:	2800      	cmp	r0, #0
 8004294:	d038      	beq.n	8004308 <_svfiprintf_r+0x1d8>
 8004296:	4b24      	ldr	r3, [pc, #144]	; (8004328 <_svfiprintf_r+0x1f8>)
 8004298:	bb1b      	cbnz	r3, 80042e2 <_svfiprintf_r+0x1b2>
 800429a:	9b03      	ldr	r3, [sp, #12]
 800429c:	3307      	adds	r3, #7
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	3308      	adds	r3, #8
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a8:	4433      	add	r3, r6
 80042aa:	9309      	str	r3, [sp, #36]	; 0x24
 80042ac:	e767      	b.n	800417e <_svfiprintf_r+0x4e>
 80042ae:	460c      	mov	r4, r1
 80042b0:	2001      	movs	r0, #1
 80042b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80042b6:	e7a5      	b.n	8004204 <_svfiprintf_r+0xd4>
 80042b8:	2300      	movs	r3, #0
 80042ba:	f04f 0c0a 	mov.w	ip, #10
 80042be:	4619      	mov	r1, r3
 80042c0:	3401      	adds	r4, #1
 80042c2:	9305      	str	r3, [sp, #20]
 80042c4:	4620      	mov	r0, r4
 80042c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042ca:	3a30      	subs	r2, #48	; 0x30
 80042cc:	2a09      	cmp	r2, #9
 80042ce:	d903      	bls.n	80042d8 <_svfiprintf_r+0x1a8>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0c5      	beq.n	8004260 <_svfiprintf_r+0x130>
 80042d4:	9105      	str	r1, [sp, #20]
 80042d6:	e7c3      	b.n	8004260 <_svfiprintf_r+0x130>
 80042d8:	4604      	mov	r4, r0
 80042da:	2301      	movs	r3, #1
 80042dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80042e0:	e7f0      	b.n	80042c4 <_svfiprintf_r+0x194>
 80042e2:	ab03      	add	r3, sp, #12
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	462a      	mov	r2, r5
 80042e8:	4638      	mov	r0, r7
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <_svfiprintf_r+0x1fc>)
 80042ec:	a904      	add	r1, sp, #16
 80042ee:	f3af 8000 	nop.w
 80042f2:	1c42      	adds	r2, r0, #1
 80042f4:	4606      	mov	r6, r0
 80042f6:	d1d6      	bne.n	80042a6 <_svfiprintf_r+0x176>
 80042f8:	89ab      	ldrh	r3, [r5, #12]
 80042fa:	065b      	lsls	r3, r3, #25
 80042fc:	f53f af2c 	bmi.w	8004158 <_svfiprintf_r+0x28>
 8004300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004302:	b01d      	add	sp, #116	; 0x74
 8004304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004308:	ab03      	add	r3, sp, #12
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	462a      	mov	r2, r5
 800430e:	4638      	mov	r0, r7
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <_svfiprintf_r+0x1fc>)
 8004312:	a904      	add	r1, sp, #16
 8004314:	f000 f87c 	bl	8004410 <_printf_i>
 8004318:	e7eb      	b.n	80042f2 <_svfiprintf_r+0x1c2>
 800431a:	bf00      	nop
 800431c:	08004998 	.word	0x08004998
 8004320:	0800499e 	.word	0x0800499e
 8004324:	080049a2 	.word	0x080049a2
 8004328:	00000000 	.word	0x00000000
 800432c:	08004079 	.word	0x08004079

08004330 <_printf_common>:
 8004330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	4616      	mov	r6, r2
 8004336:	4699      	mov	r9, r3
 8004338:	688a      	ldr	r2, [r1, #8]
 800433a:	690b      	ldr	r3, [r1, #16]
 800433c:	4607      	mov	r7, r0
 800433e:	4293      	cmp	r3, r2
 8004340:	bfb8      	it	lt
 8004342:	4613      	movlt	r3, r2
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800434a:	460c      	mov	r4, r1
 800434c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004350:	b10a      	cbz	r2, 8004356 <_printf_common+0x26>
 8004352:	3301      	adds	r3, #1
 8004354:	6033      	str	r3, [r6, #0]
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	0699      	lsls	r1, r3, #26
 800435a:	bf42      	ittt	mi
 800435c:	6833      	ldrmi	r3, [r6, #0]
 800435e:	3302      	addmi	r3, #2
 8004360:	6033      	strmi	r3, [r6, #0]
 8004362:	6825      	ldr	r5, [r4, #0]
 8004364:	f015 0506 	ands.w	r5, r5, #6
 8004368:	d106      	bne.n	8004378 <_printf_common+0x48>
 800436a:	f104 0a19 	add.w	sl, r4, #25
 800436e:	68e3      	ldr	r3, [r4, #12]
 8004370:	6832      	ldr	r2, [r6, #0]
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	42ab      	cmp	r3, r5
 8004376:	dc28      	bgt.n	80043ca <_printf_common+0x9a>
 8004378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800437c:	1e13      	subs	r3, r2, #0
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	bf18      	it	ne
 8004382:	2301      	movne	r3, #1
 8004384:	0692      	lsls	r2, r2, #26
 8004386:	d42d      	bmi.n	80043e4 <_printf_common+0xb4>
 8004388:	4649      	mov	r1, r9
 800438a:	4638      	mov	r0, r7
 800438c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004390:	47c0      	blx	r8
 8004392:	3001      	adds	r0, #1
 8004394:	d020      	beq.n	80043d8 <_printf_common+0xa8>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	68e5      	ldr	r5, [r4, #12]
 800439a:	f003 0306 	and.w	r3, r3, #6
 800439e:	2b04      	cmp	r3, #4
 80043a0:	bf18      	it	ne
 80043a2:	2500      	movne	r5, #0
 80043a4:	6832      	ldr	r2, [r6, #0]
 80043a6:	f04f 0600 	mov.w	r6, #0
 80043aa:	68a3      	ldr	r3, [r4, #8]
 80043ac:	bf08      	it	eq
 80043ae:	1aad      	subeq	r5, r5, r2
 80043b0:	6922      	ldr	r2, [r4, #16]
 80043b2:	bf08      	it	eq
 80043b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bfc4      	itt	gt
 80043bc:	1a9b      	subgt	r3, r3, r2
 80043be:	18ed      	addgt	r5, r5, r3
 80043c0:	341a      	adds	r4, #26
 80043c2:	42b5      	cmp	r5, r6
 80043c4:	d11a      	bne.n	80043fc <_printf_common+0xcc>
 80043c6:	2000      	movs	r0, #0
 80043c8:	e008      	b.n	80043dc <_printf_common+0xac>
 80043ca:	2301      	movs	r3, #1
 80043cc:	4652      	mov	r2, sl
 80043ce:	4649      	mov	r1, r9
 80043d0:	4638      	mov	r0, r7
 80043d2:	47c0      	blx	r8
 80043d4:	3001      	adds	r0, #1
 80043d6:	d103      	bne.n	80043e0 <_printf_common+0xb0>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e0:	3501      	adds	r5, #1
 80043e2:	e7c4      	b.n	800436e <_printf_common+0x3e>
 80043e4:	2030      	movs	r0, #48	; 0x30
 80043e6:	18e1      	adds	r1, r4, r3
 80043e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043f2:	4422      	add	r2, r4
 80043f4:	3302      	adds	r3, #2
 80043f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043fa:	e7c5      	b.n	8004388 <_printf_common+0x58>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4622      	mov	r2, r4
 8004400:	4649      	mov	r1, r9
 8004402:	4638      	mov	r0, r7
 8004404:	47c0      	blx	r8
 8004406:	3001      	adds	r0, #1
 8004408:	d0e6      	beq.n	80043d8 <_printf_common+0xa8>
 800440a:	3601      	adds	r6, #1
 800440c:	e7d9      	b.n	80043c2 <_printf_common+0x92>
	...

08004410 <_printf_i>:
 8004410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	7e0f      	ldrb	r7, [r1, #24]
 8004416:	4691      	mov	r9, r2
 8004418:	2f78      	cmp	r7, #120	; 0x78
 800441a:	4680      	mov	r8, r0
 800441c:	460c      	mov	r4, r1
 800441e:	469a      	mov	sl, r3
 8004420:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004426:	d807      	bhi.n	8004438 <_printf_i+0x28>
 8004428:	2f62      	cmp	r7, #98	; 0x62
 800442a:	d80a      	bhi.n	8004442 <_printf_i+0x32>
 800442c:	2f00      	cmp	r7, #0
 800442e:	f000 80d9 	beq.w	80045e4 <_printf_i+0x1d4>
 8004432:	2f58      	cmp	r7, #88	; 0x58
 8004434:	f000 80a4 	beq.w	8004580 <_printf_i+0x170>
 8004438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800443c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004440:	e03a      	b.n	80044b8 <_printf_i+0xa8>
 8004442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004446:	2b15      	cmp	r3, #21
 8004448:	d8f6      	bhi.n	8004438 <_printf_i+0x28>
 800444a:	a101      	add	r1, pc, #4	; (adr r1, 8004450 <_printf_i+0x40>)
 800444c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044bd 	.word	0x080044bd
 8004458:	08004439 	.word	0x08004439
 800445c:	08004439 	.word	0x08004439
 8004460:	08004439 	.word	0x08004439
 8004464:	08004439 	.word	0x08004439
 8004468:	080044bd 	.word	0x080044bd
 800446c:	08004439 	.word	0x08004439
 8004470:	08004439 	.word	0x08004439
 8004474:	08004439 	.word	0x08004439
 8004478:	08004439 	.word	0x08004439
 800447c:	080045cb 	.word	0x080045cb
 8004480:	080044ed 	.word	0x080044ed
 8004484:	080045ad 	.word	0x080045ad
 8004488:	08004439 	.word	0x08004439
 800448c:	08004439 	.word	0x08004439
 8004490:	080045ed 	.word	0x080045ed
 8004494:	08004439 	.word	0x08004439
 8004498:	080044ed 	.word	0x080044ed
 800449c:	08004439 	.word	0x08004439
 80044a0:	08004439 	.word	0x08004439
 80044a4:	080045b5 	.word	0x080045b5
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	1d1a      	adds	r2, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	602a      	str	r2, [r5, #0]
 80044b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0a4      	b.n	8004606 <_printf_i+0x1f6>
 80044bc:	6820      	ldr	r0, [r4, #0]
 80044be:	6829      	ldr	r1, [r5, #0]
 80044c0:	0606      	lsls	r6, r0, #24
 80044c2:	f101 0304 	add.w	r3, r1, #4
 80044c6:	d50a      	bpl.n	80044de <_printf_i+0xce>
 80044c8:	680e      	ldr	r6, [r1, #0]
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	2e00      	cmp	r6, #0
 80044ce:	da03      	bge.n	80044d8 <_printf_i+0xc8>
 80044d0:	232d      	movs	r3, #45	; 0x2d
 80044d2:	4276      	negs	r6, r6
 80044d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d8:	230a      	movs	r3, #10
 80044da:	485e      	ldr	r0, [pc, #376]	; (8004654 <_printf_i+0x244>)
 80044dc:	e019      	b.n	8004512 <_printf_i+0x102>
 80044de:	680e      	ldr	r6, [r1, #0]
 80044e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044e4:	602b      	str	r3, [r5, #0]
 80044e6:	bf18      	it	ne
 80044e8:	b236      	sxthne	r6, r6
 80044ea:	e7ef      	b.n	80044cc <_printf_i+0xbc>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	6820      	ldr	r0, [r4, #0]
 80044f0:	1d19      	adds	r1, r3, #4
 80044f2:	6029      	str	r1, [r5, #0]
 80044f4:	0601      	lsls	r1, r0, #24
 80044f6:	d501      	bpl.n	80044fc <_printf_i+0xec>
 80044f8:	681e      	ldr	r6, [r3, #0]
 80044fa:	e002      	b.n	8004502 <_printf_i+0xf2>
 80044fc:	0646      	lsls	r6, r0, #25
 80044fe:	d5fb      	bpl.n	80044f8 <_printf_i+0xe8>
 8004500:	881e      	ldrh	r6, [r3, #0]
 8004502:	2f6f      	cmp	r7, #111	; 0x6f
 8004504:	bf0c      	ite	eq
 8004506:	2308      	moveq	r3, #8
 8004508:	230a      	movne	r3, #10
 800450a:	4852      	ldr	r0, [pc, #328]	; (8004654 <_printf_i+0x244>)
 800450c:	2100      	movs	r1, #0
 800450e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004512:	6865      	ldr	r5, [r4, #4]
 8004514:	2d00      	cmp	r5, #0
 8004516:	bfa8      	it	ge
 8004518:	6821      	ldrge	r1, [r4, #0]
 800451a:	60a5      	str	r5, [r4, #8]
 800451c:	bfa4      	itt	ge
 800451e:	f021 0104 	bicge.w	r1, r1, #4
 8004522:	6021      	strge	r1, [r4, #0]
 8004524:	b90e      	cbnz	r6, 800452a <_printf_i+0x11a>
 8004526:	2d00      	cmp	r5, #0
 8004528:	d04d      	beq.n	80045c6 <_printf_i+0x1b6>
 800452a:	4615      	mov	r5, r2
 800452c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004530:	fb03 6711 	mls	r7, r3, r1, r6
 8004534:	5dc7      	ldrb	r7, [r0, r7]
 8004536:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800453a:	4637      	mov	r7, r6
 800453c:	42bb      	cmp	r3, r7
 800453e:	460e      	mov	r6, r1
 8004540:	d9f4      	bls.n	800452c <_printf_i+0x11c>
 8004542:	2b08      	cmp	r3, #8
 8004544:	d10b      	bne.n	800455e <_printf_i+0x14e>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	07de      	lsls	r6, r3, #31
 800454a:	d508      	bpl.n	800455e <_printf_i+0x14e>
 800454c:	6923      	ldr	r3, [r4, #16]
 800454e:	6861      	ldr	r1, [r4, #4]
 8004550:	4299      	cmp	r1, r3
 8004552:	bfde      	ittt	le
 8004554:	2330      	movle	r3, #48	; 0x30
 8004556:	f805 3c01 	strble.w	r3, [r5, #-1]
 800455a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800455e:	1b52      	subs	r2, r2, r5
 8004560:	6122      	str	r2, [r4, #16]
 8004562:	464b      	mov	r3, r9
 8004564:	4621      	mov	r1, r4
 8004566:	4640      	mov	r0, r8
 8004568:	f8cd a000 	str.w	sl, [sp]
 800456c:	aa03      	add	r2, sp, #12
 800456e:	f7ff fedf 	bl	8004330 <_printf_common>
 8004572:	3001      	adds	r0, #1
 8004574:	d14c      	bne.n	8004610 <_printf_i+0x200>
 8004576:	f04f 30ff 	mov.w	r0, #4294967295
 800457a:	b004      	add	sp, #16
 800457c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004580:	4834      	ldr	r0, [pc, #208]	; (8004654 <_printf_i+0x244>)
 8004582:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004586:	6829      	ldr	r1, [r5, #0]
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	f851 6b04 	ldr.w	r6, [r1], #4
 800458e:	6029      	str	r1, [r5, #0]
 8004590:	061d      	lsls	r5, r3, #24
 8004592:	d514      	bpl.n	80045be <_printf_i+0x1ae>
 8004594:	07df      	lsls	r7, r3, #31
 8004596:	bf44      	itt	mi
 8004598:	f043 0320 	orrmi.w	r3, r3, #32
 800459c:	6023      	strmi	r3, [r4, #0]
 800459e:	b91e      	cbnz	r6, 80045a8 <_printf_i+0x198>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f023 0320 	bic.w	r3, r3, #32
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	2310      	movs	r3, #16
 80045aa:	e7af      	b.n	800450c <_printf_i+0xfc>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	f043 0320 	orr.w	r3, r3, #32
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	2378      	movs	r3, #120	; 0x78
 80045b6:	4828      	ldr	r0, [pc, #160]	; (8004658 <_printf_i+0x248>)
 80045b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045bc:	e7e3      	b.n	8004586 <_printf_i+0x176>
 80045be:	0659      	lsls	r1, r3, #25
 80045c0:	bf48      	it	mi
 80045c2:	b2b6      	uxthmi	r6, r6
 80045c4:	e7e6      	b.n	8004594 <_printf_i+0x184>
 80045c6:	4615      	mov	r5, r2
 80045c8:	e7bb      	b.n	8004542 <_printf_i+0x132>
 80045ca:	682b      	ldr	r3, [r5, #0]
 80045cc:	6826      	ldr	r6, [r4, #0]
 80045ce:	1d18      	adds	r0, r3, #4
 80045d0:	6961      	ldr	r1, [r4, #20]
 80045d2:	6028      	str	r0, [r5, #0]
 80045d4:	0635      	lsls	r5, r6, #24
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	d501      	bpl.n	80045de <_printf_i+0x1ce>
 80045da:	6019      	str	r1, [r3, #0]
 80045dc:	e002      	b.n	80045e4 <_printf_i+0x1d4>
 80045de:	0670      	lsls	r0, r6, #25
 80045e0:	d5fb      	bpl.n	80045da <_printf_i+0x1ca>
 80045e2:	8019      	strh	r1, [r3, #0]
 80045e4:	2300      	movs	r3, #0
 80045e6:	4615      	mov	r5, r2
 80045e8:	6123      	str	r3, [r4, #16]
 80045ea:	e7ba      	b.n	8004562 <_printf_i+0x152>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	2100      	movs	r1, #0
 80045f0:	1d1a      	adds	r2, r3, #4
 80045f2:	602a      	str	r2, [r5, #0]
 80045f4:	681d      	ldr	r5, [r3, #0]
 80045f6:	6862      	ldr	r2, [r4, #4]
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 f8d9 	bl	80047b0 <memchr>
 80045fe:	b108      	cbz	r0, 8004604 <_printf_i+0x1f4>
 8004600:	1b40      	subs	r0, r0, r5
 8004602:	6060      	str	r0, [r4, #4]
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	6123      	str	r3, [r4, #16]
 8004608:	2300      	movs	r3, #0
 800460a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800460e:	e7a8      	b.n	8004562 <_printf_i+0x152>
 8004610:	462a      	mov	r2, r5
 8004612:	4649      	mov	r1, r9
 8004614:	4640      	mov	r0, r8
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	47d0      	blx	sl
 800461a:	3001      	adds	r0, #1
 800461c:	d0ab      	beq.n	8004576 <_printf_i+0x166>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	079b      	lsls	r3, r3, #30
 8004622:	d413      	bmi.n	800464c <_printf_i+0x23c>
 8004624:	68e0      	ldr	r0, [r4, #12]
 8004626:	9b03      	ldr	r3, [sp, #12]
 8004628:	4298      	cmp	r0, r3
 800462a:	bfb8      	it	lt
 800462c:	4618      	movlt	r0, r3
 800462e:	e7a4      	b.n	800457a <_printf_i+0x16a>
 8004630:	2301      	movs	r3, #1
 8004632:	4632      	mov	r2, r6
 8004634:	4649      	mov	r1, r9
 8004636:	4640      	mov	r0, r8
 8004638:	47d0      	blx	sl
 800463a:	3001      	adds	r0, #1
 800463c:	d09b      	beq.n	8004576 <_printf_i+0x166>
 800463e:	3501      	adds	r5, #1
 8004640:	68e3      	ldr	r3, [r4, #12]
 8004642:	9903      	ldr	r1, [sp, #12]
 8004644:	1a5b      	subs	r3, r3, r1
 8004646:	42ab      	cmp	r3, r5
 8004648:	dcf2      	bgt.n	8004630 <_printf_i+0x220>
 800464a:	e7eb      	b.n	8004624 <_printf_i+0x214>
 800464c:	2500      	movs	r5, #0
 800464e:	f104 0619 	add.w	r6, r4, #25
 8004652:	e7f5      	b.n	8004640 <_printf_i+0x230>
 8004654:	080049a9 	.word	0x080049a9
 8004658:	080049ba 	.word	0x080049ba

0800465c <_sbrk_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	2300      	movs	r3, #0
 8004660:	4d05      	ldr	r5, [pc, #20]	; (8004678 <_sbrk_r+0x1c>)
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	602b      	str	r3, [r5, #0]
 8004668:	f7fc fa24 	bl	8000ab4 <_sbrk>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_sbrk_r+0x1a>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	b103      	cbz	r3, 8004676 <_sbrk_r+0x1a>
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	200001e8 	.word	0x200001e8

0800467c <__sread>:
 800467c:	b510      	push	{r4, lr}
 800467e:	460c      	mov	r4, r1
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	f000 f906 	bl	8004894 <_read_r>
 8004688:	2800      	cmp	r0, #0
 800468a:	bfab      	itete	ge
 800468c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800468e:	89a3      	ldrhlt	r3, [r4, #12]
 8004690:	181b      	addge	r3, r3, r0
 8004692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004696:	bfac      	ite	ge
 8004698:	6563      	strge	r3, [r4, #84]	; 0x54
 800469a:	81a3      	strhlt	r3, [r4, #12]
 800469c:	bd10      	pop	{r4, pc}

0800469e <__swrite>:
 800469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	461f      	mov	r7, r3
 80046a4:	898b      	ldrh	r3, [r1, #12]
 80046a6:	4605      	mov	r5, r0
 80046a8:	05db      	lsls	r3, r3, #23
 80046aa:	460c      	mov	r4, r1
 80046ac:	4616      	mov	r6, r2
 80046ae:	d505      	bpl.n	80046bc <__swrite+0x1e>
 80046b0:	2302      	movs	r3, #2
 80046b2:	2200      	movs	r2, #0
 80046b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b8:	f000 f868 	bl	800478c <_lseek_r>
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	4632      	mov	r2, r6
 80046c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	4628      	mov	r0, r5
 80046c8:	463b      	mov	r3, r7
 80046ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d2:	f000 b817 	b.w	8004704 <_write_r>

080046d6 <__sseek>:
 80046d6:	b510      	push	{r4, lr}
 80046d8:	460c      	mov	r4, r1
 80046da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046de:	f000 f855 	bl	800478c <_lseek_r>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	bf15      	itete	ne
 80046e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80046ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046f2:	81a3      	strheq	r3, [r4, #12]
 80046f4:	bf18      	it	ne
 80046f6:	81a3      	strhne	r3, [r4, #12]
 80046f8:	bd10      	pop	{r4, pc}

080046fa <__sclose>:
 80046fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fe:	f000 b813 	b.w	8004728 <_close_r>
	...

08004704 <_write_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	2200      	movs	r2, #0
 800470e:	4d05      	ldr	r5, [pc, #20]	; (8004724 <_write_r+0x20>)
 8004710:	602a      	str	r2, [r5, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	f7fc f974 	bl	8000a00 <_write>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_write_r+0x1e>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_write_r+0x1e>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	200001e8 	.word	0x200001e8

08004728 <_close_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	2300      	movs	r3, #0
 800472c:	4d05      	ldr	r5, [pc, #20]	; (8004744 <_close_r+0x1c>)
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	602b      	str	r3, [r5, #0]
 8004734:	f7fc f98e 	bl	8000a54 <_close>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_close_r+0x1a>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	b103      	cbz	r3, 8004742 <_close_r+0x1a>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	200001e8 	.word	0x200001e8

08004748 <_fstat_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	2300      	movs	r3, #0
 800474c:	4d06      	ldr	r5, [pc, #24]	; (8004768 <_fstat_r+0x20>)
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	4611      	mov	r1, r2
 8004754:	602b      	str	r3, [r5, #0]
 8004756:	f7fc f988 	bl	8000a6a <_fstat>
 800475a:	1c43      	adds	r3, r0, #1
 800475c:	d102      	bne.n	8004764 <_fstat_r+0x1c>
 800475e:	682b      	ldr	r3, [r5, #0]
 8004760:	b103      	cbz	r3, 8004764 <_fstat_r+0x1c>
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	bd38      	pop	{r3, r4, r5, pc}
 8004766:	bf00      	nop
 8004768:	200001e8 	.word	0x200001e8

0800476c <_isatty_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	2300      	movs	r3, #0
 8004770:	4d05      	ldr	r5, [pc, #20]	; (8004788 <_isatty_r+0x1c>)
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	f7fc f986 	bl	8000a88 <_isatty>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_isatty_r+0x1a>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_isatty_r+0x1a>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	200001e8 	.word	0x200001e8

0800478c <_lseek_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4604      	mov	r4, r0
 8004790:	4608      	mov	r0, r1
 8004792:	4611      	mov	r1, r2
 8004794:	2200      	movs	r2, #0
 8004796:	4d05      	ldr	r5, [pc, #20]	; (80047ac <_lseek_r+0x20>)
 8004798:	602a      	str	r2, [r5, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	f7fc f97e 	bl	8000a9c <_lseek>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_lseek_r+0x1e>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_lseek_r+0x1e>
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	200001e8 	.word	0x200001e8

080047b0 <memchr>:
 80047b0:	4603      	mov	r3, r0
 80047b2:	b510      	push	{r4, lr}
 80047b4:	b2c9      	uxtb	r1, r1
 80047b6:	4402      	add	r2, r0
 80047b8:	4293      	cmp	r3, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	d101      	bne.n	80047c2 <memchr+0x12>
 80047be:	2000      	movs	r0, #0
 80047c0:	e003      	b.n	80047ca <memchr+0x1a>
 80047c2:	7804      	ldrb	r4, [r0, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	428c      	cmp	r4, r1
 80047c8:	d1f6      	bne.n	80047b8 <memchr+0x8>
 80047ca:	bd10      	pop	{r4, pc}

080047cc <memcpy>:
 80047cc:	440a      	add	r2, r1
 80047ce:	4291      	cmp	r1, r2
 80047d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xc>
 80047d6:	4770      	bx	lr
 80047d8:	b510      	push	{r4, lr}
 80047da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047de:	4291      	cmp	r1, r2
 80047e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e4:	d1f9      	bne.n	80047da <memcpy+0xe>
 80047e6:	bd10      	pop	{r4, pc}

080047e8 <memmove>:
 80047e8:	4288      	cmp	r0, r1
 80047ea:	b510      	push	{r4, lr}
 80047ec:	eb01 0402 	add.w	r4, r1, r2
 80047f0:	d902      	bls.n	80047f8 <memmove+0x10>
 80047f2:	4284      	cmp	r4, r0
 80047f4:	4623      	mov	r3, r4
 80047f6:	d807      	bhi.n	8004808 <memmove+0x20>
 80047f8:	1e43      	subs	r3, r0, #1
 80047fa:	42a1      	cmp	r1, r4
 80047fc:	d008      	beq.n	8004810 <memmove+0x28>
 80047fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004806:	e7f8      	b.n	80047fa <memmove+0x12>
 8004808:	4601      	mov	r1, r0
 800480a:	4402      	add	r2, r0
 800480c:	428a      	cmp	r2, r1
 800480e:	d100      	bne.n	8004812 <memmove+0x2a>
 8004810:	bd10      	pop	{r4, pc}
 8004812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800481a:	e7f7      	b.n	800480c <memmove+0x24>

0800481c <__malloc_lock>:
 800481c:	4801      	ldr	r0, [pc, #4]	; (8004824 <__malloc_lock+0x8>)
 800481e:	f7ff bae7 	b.w	8003df0 <__retarget_lock_acquire_recursive>
 8004822:	bf00      	nop
 8004824:	200001dc 	.word	0x200001dc

08004828 <__malloc_unlock>:
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <__malloc_unlock+0x8>)
 800482a:	f7ff bae2 	b.w	8003df2 <__retarget_lock_release_recursive>
 800482e:	bf00      	nop
 8004830:	200001dc 	.word	0x200001dc

08004834 <_realloc_r>:
 8004834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004838:	4680      	mov	r8, r0
 800483a:	4614      	mov	r4, r2
 800483c:	460e      	mov	r6, r1
 800483e:	b921      	cbnz	r1, 800484a <_realloc_r+0x16>
 8004840:	4611      	mov	r1, r2
 8004842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004846:	f7ff bba3 	b.w	8003f90 <_malloc_r>
 800484a:	b92a      	cbnz	r2, 8004858 <_realloc_r+0x24>
 800484c:	f7ff fb38 	bl	8003ec0 <_free_r>
 8004850:	4625      	mov	r5, r4
 8004852:	4628      	mov	r0, r5
 8004854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004858:	f000 f82e 	bl	80048b8 <_malloc_usable_size_r>
 800485c:	4284      	cmp	r4, r0
 800485e:	4607      	mov	r7, r0
 8004860:	d802      	bhi.n	8004868 <_realloc_r+0x34>
 8004862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004866:	d812      	bhi.n	800488e <_realloc_r+0x5a>
 8004868:	4621      	mov	r1, r4
 800486a:	4640      	mov	r0, r8
 800486c:	f7ff fb90 	bl	8003f90 <_malloc_r>
 8004870:	4605      	mov	r5, r0
 8004872:	2800      	cmp	r0, #0
 8004874:	d0ed      	beq.n	8004852 <_realloc_r+0x1e>
 8004876:	42bc      	cmp	r4, r7
 8004878:	4622      	mov	r2, r4
 800487a:	4631      	mov	r1, r6
 800487c:	bf28      	it	cs
 800487e:	463a      	movcs	r2, r7
 8004880:	f7ff ffa4 	bl	80047cc <memcpy>
 8004884:	4631      	mov	r1, r6
 8004886:	4640      	mov	r0, r8
 8004888:	f7ff fb1a 	bl	8003ec0 <_free_r>
 800488c:	e7e1      	b.n	8004852 <_realloc_r+0x1e>
 800488e:	4635      	mov	r5, r6
 8004890:	e7df      	b.n	8004852 <_realloc_r+0x1e>
	...

08004894 <_read_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	2200      	movs	r2, #0
 800489e:	4d05      	ldr	r5, [pc, #20]	; (80048b4 <_read_r+0x20>)
 80048a0:	602a      	str	r2, [r5, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f7fc f88e 	bl	80009c4 <_read>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_read_r+0x1e>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_read_r+0x1e>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	200001e8 	.word	0x200001e8

080048b8 <_malloc_usable_size_r>:
 80048b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048bc:	1f18      	subs	r0, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbc      	itt	lt
 80048c2:	580b      	ldrlt	r3, [r1, r0]
 80048c4:	18c0      	addlt	r0, r0, r3
 80048c6:	4770      	bx	lr

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
